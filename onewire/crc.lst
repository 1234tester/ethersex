   1               		.file	"crc.c"
   2               		.arch atmega644
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
  65               	.global	crc_checksum
  67               	crc_checksum:
  68               		.stabd	46,0,0
   1:onewire/crc.c **** /* vim:fdm=marker ts=4 et ai
   2:onewire/crc.c ****  * {{{
   3:onewire/crc.c ****  *         simple onewire library implementation
   4:onewire/crc.c ****  *
   5:onewire/crc.c ****  *    for additional information please
   6:onewire/crc.c ****  *    see http://koeln.ccc.de/prozesse/running/fnordlicht
   7:onewire/crc.c ****  *
   8:onewire/crc.c ****  * (c) by Alexander Neumann <alexander@bumpern.de>
   9:onewire/crc.c ****  *
  10:onewire/crc.c ****  * This program is free software; you can redistribute it and/or modify
  11:onewire/crc.c ****  * it under the terms of the GNU General Public License version 2 as
  12:onewire/crc.c ****  * published by the Free Software Foundation.
  13:onewire/crc.c ****  *
  14:onewire/crc.c ****  * This program is distributed in the hope that it will be useful,
  15:onewire/crc.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:onewire/crc.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:onewire/crc.c ****  * GNU General Public License for more details.
  18:onewire/crc.c ****  *
  19:onewire/crc.c ****  * You should have received a copy of the GNU General Public License
  20:onewire/crc.c ****  * along with this program; if not, write to the Free Software
  21:onewire/crc.c ****  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
  22:onewire/crc.c ****  *
  23:onewire/crc.c ****  * For more information on the GPL, please go to:
  24:onewire/crc.c ****  * http://www.gnu.org/copyleft/gpl.html
  25:onewire/crc.c ****  }}} */
  26:onewire/crc.c **** 
  27:onewire/crc.c **** #include <util/crc16.h>
  28:onewire/crc.c **** #include "crc.h"
  29:onewire/crc.c **** 
  30:onewire/crc.c **** uint8_t crc_checksum(void *data, uint8_t length)
  31:onewire/crc.c **** /* {{{ */ {
  70               	.LM0:
  71               	/* prologue: frame size=0 */
  72               	/* prologue end (size=0) */
  32:onewire/crc.c **** 
  33:onewire/crc.c ****     uint8_t crc = 0;
  34:onewire/crc.c ****     uint8_t *p = (uint8_t *)data;
  74               	.LM1:
  75 0000 FC01      		movw r30,r24
  76 0002 90E0      		ldi r25,lo8(0)
  77 0004 30E0      		ldi r19,lo8(0)
  78 0006 0DC0      		rjmp .L2
  79               	.L3:
  80               	.LBB5:
  81               	.LBB6:
  82               	.LBB7:
  84               	.Ltext1:
   1:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /* Copyright (c) 2002, 2003, 2004  Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    Copyright (c) 2005, Joerg Wunsch
   3:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    All rights reserved.
   4:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
   5:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
   8:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  11:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      distribution.
  15:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  16:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  20:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  32:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /* $Id: crc16.h,v 1.2.2.1 2006/04/19 20:35:54 joerg_wunsch Exp $ */
  33:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  34:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** #ifndef _UTIL_CRC16_H_
  35:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** #define _UTIL_CRC16_H_
  36:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  37:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** #include <stdint.h>
  38:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  39:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /** \defgroup util_crc <util/crc16.h>: CRC Computations
  40:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code#include <util/crc16.h>\endcode
  41:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  42:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     This header file provides a optimized inline functions for calculating
  43:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     cyclic redundancy checks (CRC) using common polynomials.
  44:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  45:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \par References:
  46:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  47:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \par
  48:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  49:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     See the Dallas Semiconductor app note 27 for 8051 assembler example and
  50:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     general CRC optimization suggestions. The table on the last page of the
  51:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     app note is the key to understanding these implementations.
  52:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  53:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \par
  54:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  55:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Jack Crenshaw's "Implementing CRCs" article in the January 1992 isue of \e
  56:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Embedded \e Systems \e Programming. This may be difficult to find, but it
  57:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     explains CRC's in very clear and concise terms. Well worth the effort to
  58:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     obtain a copy.
  59:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  60:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     A typical application would look like:
  61:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  62:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code
  63:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     // Dallas iButton test vector.
  64:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint8_t serno[] = { 0x02, 0x1c, 0xb8, 0x01, 0, 0, 0, 0xa2 };
  65:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  66:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     int
  67:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     checkcrc(void)
  68:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     {
  69:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	uint8_t crc = 0, i;
  70:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  71:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	for (i = 0; i < sizeof serno / sizeof serno[0]; i++)
  72:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	    crc = _crc_ibutton_update(crc, serno[i]);
  73:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  74:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	return crc; // must be 0
  75:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     }
  76:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \endcode
  77:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** */
  78:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  79:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /** \ingroup util_crc
  80:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Optimized CRC-16 calculation.
  81:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  82:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Polynomial: x^16 + x^15 + x^2 + 1 (0xa001)<br>
  83:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Initial value: 0xffff
  84:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  85:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     This CRC is normally used in disk-drive controllers.
  86:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  87:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
  88:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  89:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code
  90:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint16_t
  91:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     crc16_update(uint16_t crc, uint8_t a)
  92:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     {
  93:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	int i;
  94:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  95:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	crc ^= a;
  96:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	for (i = 0; i < 8; ++i)
  97:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	{
  98:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	    if (crc & 1)
  99:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		crc = (crc >> 1) ^ 0xA001;
 100:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	    else
 101:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		crc = (crc >> 1);
 102:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	}
 103:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 104:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	return crc;
 105:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     }
 106:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 107:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \endcode */
 108:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 109:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** static __inline__ uint16_t
 110:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** _crc16_update(uint16_t __crc, uint8_t __data)
 111:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** {
 112:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	uint8_t __tmp;
 113:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	uint16_t __ret;
 114:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 115:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	__asm__ __volatile__ (
 116:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %A0,%2" "\n\t"
 117:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov %1,%A0" "\n\t"
 118:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"swap %1" "\n\t"
 119:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %1,%A0" "\n\t"
 120:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov __tmp_reg__,%1" "\n\t"
 121:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 122:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 123:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %1,__tmp_reg__" "\n\t"
 124:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov __tmp_reg__,%1" "\n\t"
 125:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 126:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %1,__tmp_reg__" "\n\t"
 127:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"andi %1,0x07" "\n\t"
 128:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov __tmp_reg__,%A0" "\n\t"
 129:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov %A0,%B0" "\n\t"
 130:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 131:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"ror __tmp_reg__" "\n\t"
 132:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"ror %1" "\n\t"
 133:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov %B0,__tmp_reg__" "\n\t"
 134:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %A0,%1" "\n\t"
 135:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"lsr __tmp_reg__" "\n\t"
 136:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"ror %1" "\n\t"
 137:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %B0,__tmp_reg__" "\n\t"
 138:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %A0,%1"
 139:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		: "=r" (__ret), "=d" (__tmp)
 140:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		: "r" (__data), "0" (__crc)
 141:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		: "r0"
 142:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	);
 143:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	return __ret;
 144:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** }
 145:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 146:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /** \ingroup util_crc
 147:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Optimized CRC-XMODEM calculation.
 148:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 149:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Polynomial: x^16 + x^12 + x^5 + 1 (0x1021)<br>
 150:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Initial value: 0x0
 151:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 152:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     This is the CRC used by the Xmodem-CRC protocol.
 153:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 154:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
 155:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 156:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code
 157:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint16_t
 158:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     crc_xmodem_update (uint16_t crc, uint8_t data)
 159:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     {
 160:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         int i;
 161:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 162:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         crc = crc ^ ((uint16_t)data << 8);
 163:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         for (i=0; i<8; i++)
 164:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         {
 165:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****             if (crc & 0x8000)
 166:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****                 crc = (crc << 1) ^ 0x1021;
 167:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****             else
 168:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****                 crc <<= 1;
 169:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         }
 170:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 171:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         return crc;
 172:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     }
 173:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \endcode */
 174:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 175:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** static __inline__ uint16_t
 176:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** _crc_xmodem_update(uint16_t __crc, uint8_t __data)
 177:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** {
 178:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint16_t __ret;             /* %B0:%A0 (alias for __crc) */
 179:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint8_t __tmp1;             /* %1 */
 180:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint8_t __tmp2;             /* %2 */
 181:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****                                 /* %3  __data */
 182:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 183:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     __asm__ __volatile__ (
 184:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %B0,%3"          "\n\t" /* crc.hi ^ data */
 185:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    __tmp_reg__,%B0" "\n\t"
 186:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "swap   __tmp_reg__"     "\n\t" /* swap(crc.hi ^ data) */
 187:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 188:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         /* Calculate the ret.lo of the CRC. */
 189:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    %1,__tmp_reg__"  "\n\t"
 190:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %1,0x0f"         "\n\t"
 191:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %1,%B0"          "\n\t"
 192:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    %2,%B0"          "\n\t"
 193:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %2,__tmp_reg__"  "\n\t"
 194:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsl    %2"              "\n\t"
 195:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %2,0xe0"         "\n\t"
 196:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %1,%2"           "\n\t" /* __tmp1 is now ret.lo. */
 197:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 198:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         /* Calculate the ret.hi of the CRC. */
 199:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    %2,__tmp_reg__"  "\n\t"
 200:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %2,%B0"          "\n\t"
 201:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %2,0xf0"         "\n\t"
 202:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsr    %2"              "\n\t"
 203:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    __tmp_reg__,%B0" "\n\t"
 204:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsl    __tmp_reg__"     "\n\t"
 205:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "rol    %2"              "\n\t"
 206:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsr    %B0"             "\n\t"
 207:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsr    %B0"             "\n\t"
 208:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsr    %B0"             "\n\t"
 209:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %B0,0x1f"        "\n\t"
 210:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %B0,%2"          "\n\t"
 211:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %B0,%A0"         "\n\t" /* ret.hi is now ready. */
 212:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    %A0,%1"          "\n\t" /* ret.lo is now ready. */
 213:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "=d" (__ret), "=d" (__tmp1), "=d" (__tmp2)
 214:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "r" (__data), "0" (__crc)
 215:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "r0"
 216:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     );
 217:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     return __ret;
 218:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** }
 219:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 220:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /** \ingroup util_crc
 221:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Optimized CRC-CCITT calculation.
 222:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 223:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Polynomial: x^16 + x^12 + x^5 + 1 (0x8408)<br>
 224:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Initial value: 0xffff
 225:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 226:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     This is the CRC used by PPP and IrDA.
 227:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 228:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     See RFC1171 (PPP protocol) and IrDA IrLAP 1.1
 229:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 230:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \note Although the CCITT polynomial is the same as that used by the Xmodem
 231:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     protocol, they are quite different. The difference is in how the bits are
 232:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     shifted through the alorgithm. Xmodem shifts the MSB of the CRC and the
 233:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     input first, while CCITT shifts the LSB of the CRC and the input first.
 234:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 235:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
 236:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 237:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code
 238:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint16_t
 239:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     crc_ccitt_update (uint16_t crc, uint8_t data)
 240:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     {
 241:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         data ^= lo8 (crc);
 242:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         data ^= data << 4;
 243:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 244:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         return ((((uint16_t)data << 8) | hi8 (crc)) ^ (uint8_t)(data >> 4) 
 245:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****                 ^ ((uint16_t)data << 3));
 246:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     }
 247:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \endcode */
 248:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 249:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** static __inline__ uint16_t
 250:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** _crc_ccitt_update (uint16_t __crc, uint8_t __data)
 251:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** {
 252:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint16_t __ret;
 253:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 254:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     __asm__ __volatile__ (
 255:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %A0,%1"          "\n\t"
 256:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 257:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    __tmp_reg__,%A0" "\n\t"
 258:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "swap   %A0"             "\n\t"
 259:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %A0,0xf0"        "\n\t"
 260:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %A0,__tmp_reg__" "\n\t"
 261:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 262:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    __tmp_reg__,%B0" "\n\t"
 263:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 264:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    %B0,%A0"         "\n\t"
 265:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 266:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "swap   %A0"             "\n\t"
 267:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %A0,0x0f"        "\n\t"
 268:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    __tmp_reg__,%A0" "\n\t"
 269:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 270:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsr    %A0"             "\n\t"
 271:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %B0,%A0"         "\n\t"
 272:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 273:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %A0,%B0"         "\n\t"
 274:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsl    %A0"             "\n\t"
 275:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsl    %A0"             "\n\t"
 276:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsl    %A0"             "\n\t"
 277:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %A0,__tmp_reg__"
 278:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 279:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "=d" (__ret)
 280:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "r" (__data), "0" (__crc)
 281:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "r0"
 282:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     );
 283:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     return __ret;
 284:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** }
 285:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 286:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /** \ingroup util_crc
 287:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Optimized Dallas (now Maxim) iButton 8-bit CRC calculation.
 288:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 289:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Polynomial: x^8 + x^5 + x^4 + 1 (0x8C)<br>
 290:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Initial value: 0x0
 291:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 292:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     See http://www.maxim-ic.com/appnotes.cfm/appnote_number/27
 293:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 294:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
 295:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 296:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code
 297:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint8_t
 298:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     _crc_ibutton_update(uint8_t crc, uint8_t data)
 299:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     {
 300:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	uint8_t i;
 301:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 302:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	crc = crc ^ data;
 303:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	for (i = 0; i < 8; i++)
 304:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	{
 305:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	    if (crc & 0x01)
 306:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	        crc = (crc >> 1) ^ 0x8C;
 307:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	    else
 308:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	        crc >>= 1;
 309:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	}
 310:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 311:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	return crc;
 312:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     }
 313:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \endcode
 314:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** */
 315:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 316:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** static __inline__ uint8_t
 317:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** _crc_ibutton_update(uint8_t __crc, uint8_t __data)
 318:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** {
 319:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	uint8_t __i, __pattern;
 320:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	__asm__ __volatile__ (
  86               	.LM2:
  87 0008 8191      		ld r24,Z+
  88 000a 492F      		mov r20,r25
  89               	/* #APP */
  90 000c 4827      			eor	r20, r24
  91 000e 28E0      			ldi	r18, 8
  92 0010 9CE8      			ldi	r25, 0x8C
  93 0012 40FB      		1:	bst	r20, 0
  94 0014 4695      			lsr	r20
  95 0016 0EF4      			brtc	2f
  96 0018 4927      			eor	r20, r25
  97 001a 2A95      		2:	dec	r18
  98 001c D1F7      			brne	1b
  99               		
 100               	/* #NOAPP */
 101               	.LBE7:
 102               	.LBE6:
 104               	.Ltext2:
  35:onewire/crc.c **** 
  36:onewire/crc.c ****     for (uint8_t i = 0; i < length; i++) {
  37:onewire/crc.c ****         crc = _crc_ibutton_update(crc, *p);
 106               	.LM3:
 107 001e 942F      		mov r25,r20
 109               	.LM4:
 110 0020 3F5F      		subi r19,lo8(-(1))
 111               	.L2:
 112 0022 3617      		cp r19,r22
 113 0024 89F7      		brne .L3
 114               	.LBE5:
  38:onewire/crc.c ****         p++;
  39:onewire/crc.c ****     }
  40:onewire/crc.c **** 
  41:onewire/crc.c ****     return crc;
  42:onewire/crc.c **** 
  43:onewire/crc.c **** } /* }}} */
 116               	.LM5:
 117 0026 892F      		mov r24,r25
 118 0028 9927      		clr r25
 119               	/* epilogue: frame size=0 */
 120 002a 0895      		ret
 121               	/* epilogue end (size=1) */
 122               	/* function crc_checksum size 33 (32) */
 138               	.Lscope0:
 140               		.stabd	78,0,0
 142               	.Letext0:
 143               	/* File "onewire/crc.c": code   33 = 0x0021 (  32), prologues   0, epilogues   1 */
DEFINED SYMBOLS
                            *ABS*:00000000 crc.c
     /tmp/ccK2S1JO.s:3      *ABS*:0000003f __SREG__
     /tmp/ccK2S1JO.s:4      *ABS*:0000003e __SP_H__
     /tmp/ccK2S1JO.s:5      *ABS*:0000003d __SP_L__
     /tmp/ccK2S1JO.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccK2S1JO.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccK2S1JO.s:67     .text:00000000 crc_checksum

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
