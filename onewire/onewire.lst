   1               		.file	"onewire.c"
   2               		.arch atmega644
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
 147               	.global	init_onewire
 149               	init_onewire:
 150               		.stabd	46,0,0
   1:onewire/onewire.c **** /* vim:fdm=marker ts=4 et ai
   2:onewire/onewire.c ****  * {{{
   3:onewire/onewire.c ****  *         simple onewire library implementation
   4:onewire/onewire.c ****  *
   5:onewire/onewire.c ****  *    for additional information please
   6:onewire/onewire.c ****  *    see http://koeln.ccc.de/prozesse/running/fnordlicht
   7:onewire/onewire.c ****  *
   8:onewire/onewire.c ****  * (c) by Alexander Neumann <alexander@bumpern.de>
   9:onewire/onewire.c ****  *
  10:onewire/onewire.c ****  * This program is free software; you can redistribute it and/or modify
  11:onewire/onewire.c ****  * it under the terms of the GNU General Public License version 2 as
  12:onewire/onewire.c ****  * published by the Free Software Foundation.
  13:onewire/onewire.c ****  *
  14:onewire/onewire.c ****  * This program is distributed in the hope that it will be useful,
  15:onewire/onewire.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:onewire/onewire.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:onewire/onewire.c ****  * GNU General Public License for more details.
  18:onewire/onewire.c ****  *
  19:onewire/onewire.c ****  * You should have received a copy of the GNU General Public License
  20:onewire/onewire.c ****  * along with this program; if not, write to the Free Software
  21:onewire/onewire.c ****  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
  22:onewire/onewire.c ****  *
  23:onewire/onewire.c ****  * For more information on the GPL, please go to:
  24:onewire/onewire.c ****  * http://www.gnu.org/copyleft/gpl.html
  25:onewire/onewire.c ****  }}} */
  26:onewire/onewire.c **** 
  27:onewire/onewire.c **** #include <avr/io.h>
  28:onewire/onewire.c **** #include <util/delay.h>
  29:onewire/onewire.c **** #include <util/crc16.h>
  30:onewire/onewire.c **** 
  31:onewire/onewire.c **** #include "../config.h"
  32:onewire/onewire.c **** #include "../crc.h"
  33:onewire/onewire.c **** #include "onewire.h"
  34:onewire/onewire.c **** 
  35:onewire/onewire.c **** #if !defined(ONEWIRE_PINNUM) || !defined(ONEWIRE_PIN) || !defined(ONEWIRE_PORT) || !defined(ONEWIRE
  36:onewire/onewire.c **** #error ONEWIRE_PINNUM, ONEWIRE_PIN, ONEWIRE_DDR or ONEWIRE_PORT undefined!
  37:onewire/onewire.c **** #endif
  38:onewire/onewire.c **** 
  39:onewire/onewire.c **** #ifdef ONEWIRE_SUPPORT
  40:onewire/onewire.c **** 
  41:onewire/onewire.c **** #define noinline __attribute__((noinline))
  42:onewire/onewire.c **** 
  43:onewire/onewire.c **** #ifdef DEBUG
  44:onewire/onewire.c **** #include "../uart.h"
  45:onewire/onewire.c **** #endif
  46:onewire/onewire.c **** 
  47:onewire/onewire.c **** /* global variables */
  48:onewire/onewire.c **** struct ow_global_t ow_global;
  49:onewire/onewire.c **** 
  50:onewire/onewire.c **** /* module local prototypes */
  51:onewire/onewire.c **** void noinline ow_set_address_bit(struct ow_rom_code_t *rom, uint8_t idx, uint8_t val);
  52:onewire/onewire.c **** uint8_t ow_read_byte(void);
  53:onewire/onewire.c **** 
  54:onewire/onewire.c **** void init_onewire(void)
  55:onewire/onewire.c **** /* {{{ */ {
 152               	.LM0:
 153               	/* prologue: frame size=0 */
 154               	/* prologue end (size=0) */
  56:onewire/onewire.c **** 
  57:onewire/onewire.c ****     /* configure onewire pin as input */
  58:onewire/onewire.c ****     OW_CONFIG_INPUT();
 156               	.LM1:
 157 0000 5E9A      		sbi 43-0x20,6
 158 0002 5698      		cbi 42-0x20,6
  59:onewire/onewire.c **** 
  60:onewire/onewire.c ****     /* enable pullup */
  61:onewire/onewire.c ****     OW_PULLUP();
 160               	.LM2:
 161 0004 5E9A      		sbi 43-0x20,6
 162               	/* epilogue: frame size=0 */
 163 0006 0895      		ret
 164               	/* epilogue end (size=1) */
 165               	/* function init_onewire size 4 (3) */
 167               	.Lscope0:
 169               		.stabd	78,0,0
 174               	.global	ow_set_address_bit
 176               	ow_set_address_bit:
 177               		.stabd	46,0,0
  62:onewire/onewire.c **** 
  63:onewire/onewire.c **** } /* }}} */
  64:onewire/onewire.c **** 
  65:onewire/onewire.c **** /* low-level functions */
  66:onewire/onewire.c **** 
  67:onewire/onewire.c **** uint8_t noinline reset_onewire(void)
  68:onewire/onewire.c **** /* {{{ */ {
  69:onewire/onewire.c **** 
  70:onewire/onewire.c ****     /* pull bus low */
  71:onewire/onewire.c ****     OW_CONFIG_OUTPUT();
  72:onewire/onewire.c ****     OW_LOW();
  73:onewire/onewire.c **** 
  74:onewire/onewire.c ****     /* wait 480us */
  75:onewire/onewire.c ****     _delay_loop_2(OW_RESET_TIMEOUT_1);
  76:onewire/onewire.c **** 
  77:onewire/onewire.c ****     /* release bus */
  78:onewire/onewire.c ****     OW_HIGH();
  79:onewire/onewire.c ****     OW_CONFIG_INPUT();
  80:onewire/onewire.c **** 
  81:onewire/onewire.c ****     /* wait 60us (maximal pause) + 30 us (half minimum pulse) */
  82:onewire/onewire.c ****     _delay_loop_2(OW_RESET_TIMEOUT_2);
  83:onewire/onewire.c **** 
  84:onewire/onewire.c ****     /* sample data */
  85:onewire/onewire.c ****     uint8_t data1 = OW_GET_INPUT();
  86:onewire/onewire.c **** 
  87:onewire/onewire.c ****     /* wait 390us */
  88:onewire/onewire.c ****     _delay_loop_2(OW_RESET_TIMEOUT_3);
  89:onewire/onewire.c **** 
  90:onewire/onewire.c ****     /* sample data again */
  91:onewire/onewire.c ****     uint8_t data2 = OW_GET_INPUT();
  92:onewire/onewire.c **** 
  93:onewire/onewire.c ****     /* if first sample is low and second sample is high, at least one device is
  94:onewire/onewire.c ****      * attached to this bus */
  95:onewire/onewire.c ****     return !data1 && data2;
  96:onewire/onewire.c **** 
  97:onewire/onewire.c **** } /* }}} */
  98:onewire/onewire.c **** 
  99:onewire/onewire.c **** void noinline ow_write_0(void)
 100:onewire/onewire.c **** /* {{{ */ {
 101:onewire/onewire.c **** 
 102:onewire/onewire.c ****     /* a write 0 timeslot is initiated by holding the data line low for
 103:onewire/onewire.c ****      * approximately 80us */
 104:onewire/onewire.c **** 
 105:onewire/onewire.c ****     OW_LOW();
 106:onewire/onewire.c ****     _delay_loop_2(OW_WRITE_0_TIMEOUT);
 107:onewire/onewire.c ****     OW_HIGH();
 108:onewire/onewire.c **** 
 109:onewire/onewire.c **** } /* }}} */
 110:onewire/onewire.c **** 
 111:onewire/onewire.c **** void noinline ow_write_1(void)
 112:onewire/onewire.c **** /* {{{ */ {
 113:onewire/onewire.c **** 
 114:onewire/onewire.c ****     /* a write 1 timeslot is initiated by holding the data line low for
 115:onewire/onewire.c ****      * approximately 4us, then restore the idle state and wait at least 80us */
 116:onewire/onewire.c **** 
 117:onewire/onewire.c ****     OW_LOW();
 118:onewire/onewire.c ****     _delay_loop_2(OW_WRITE_1_TIMEOUT_1);
 119:onewire/onewire.c ****     OW_HIGH();
 120:onewire/onewire.c ****     _delay_loop_2(OW_WRITE_1_TIMEOUT_2);
 121:onewire/onewire.c **** 
 122:onewire/onewire.c **** } /* }}} */
 123:onewire/onewire.c **** 
 124:onewire/onewire.c **** void noinline ow_write(uint8_t value)
 125:onewire/onewire.c **** /* {{{ */ {
 126:onewire/onewire.c **** 
 127:onewire/onewire.c ****     if (value > 0)
 128:onewire/onewire.c ****         ow_write_1();
 129:onewire/onewire.c ****     else
 130:onewire/onewire.c ****         ow_write_0();
 131:onewire/onewire.c **** 
 132:onewire/onewire.c **** } /* }}} */
 133:onewire/onewire.c **** 
 134:onewire/onewire.c **** void noinline ow_write_byte(uint8_t value)
 135:onewire/onewire.c **** /* {{{ */ {
 136:onewire/onewire.c **** 
 137:onewire/onewire.c ****     OW_CONFIG_OUTPUT();
 138:onewire/onewire.c ****     for (uint8_t i = 0; i < 8; i++) {
 139:onewire/onewire.c **** 
 140:onewire/onewire.c ****         ow_write(value & _BV(i));
 141:onewire/onewire.c ****     }
 142:onewire/onewire.c **** 
 143:onewire/onewire.c **** } /* }}} */
 144:onewire/onewire.c **** 
 145:onewire/onewire.c **** /* FIXME: (optimization) combine ow_write_1() and ow_read(), as they are very similar */
 146:onewire/onewire.c **** uint8_t noinline ow_read(void)
 147:onewire/onewire.c **** /* {{{ */ {
 148:onewire/onewire.c **** 
 149:onewire/onewire.c ****     /* a read timeslot is sent by holding the data line low for
 150:onewire/onewire.c ****      * 1us, then wait approximately 14us, then sample data and
 151:onewire/onewire.c ****      * wait  */
 152:onewire/onewire.c **** 
 153:onewire/onewire.c ****     OW_CONFIG_OUTPUT();
 154:onewire/onewire.c ****     OW_LOW();
 155:onewire/onewire.c **** 
 156:onewire/onewire.c ****     _delay_loop_2(OW_READ_TIMEOUT_1);
 157:onewire/onewire.c **** 
 158:onewire/onewire.c ****     OW_HIGH();
 159:onewire/onewire.c ****     OW_CONFIG_INPUT();
 160:onewire/onewire.c **** 
 161:onewire/onewire.c ****     _delay_loop_2(OW_READ_TIMEOUT_2);
 162:onewire/onewire.c **** 
 163:onewire/onewire.c ****     /* sample data now */
 164:onewire/onewire.c ****     uint8_t data = OW_GET_INPUT();
 165:onewire/onewire.c **** 
 166:onewire/onewire.c ****     /* wait for remaining slot time */
 167:onewire/onewire.c ****     _delay_loop_2(OW_READ_TIMEOUT_3);
 168:onewire/onewire.c **** 
 169:onewire/onewire.c ****     return data;
 170:onewire/onewire.c **** 
 171:onewire/onewire.c **** } /* }}} */
 172:onewire/onewire.c **** 
 173:onewire/onewire.c **** uint8_t noinline ow_read_byte(void)
 174:onewire/onewire.c **** /* {{{ */ {
 175:onewire/onewire.c **** 
 176:onewire/onewire.c ****     uint8_t data = 0;
 177:onewire/onewire.c **** 
 178:onewire/onewire.c ****     for (uint8_t i = 0; i < 8; i++) {
 179:onewire/onewire.c ****         data |= (ow_read() << i);
 180:onewire/onewire.c ****     }
 181:onewire/onewire.c **** 
 182:onewire/onewire.c ****     return data;
 183:onewire/onewire.c **** 
 184:onewire/onewire.c **** } /* }}} */
 185:onewire/onewire.c **** 
 186:onewire/onewire.c **** 
 187:onewire/onewire.c **** /* mid-level functions */
 188:onewire/onewire.c **** int8_t noinline ow_read_rom(struct ow_rom_code_t *rom)
 189:onewire/onewire.c **** /* {{{ */ {
 190:onewire/onewire.c **** 
 191:onewire/onewire.c ****     /* reset the bus */
 192:onewire/onewire.c ****     if (!reset_onewire())
 193:onewire/onewire.c ****         return -1;
 194:onewire/onewire.c **** 
 195:onewire/onewire.c ****     /* transmit command byte */
 196:onewire/onewire.c ****     ow_write_byte(OW_ROM_READ_ROM);
 197:onewire/onewire.c **** 
 198:onewire/onewire.c ****     /* read 64bit rom code */
 199:onewire/onewire.c ****     for (uint8_t i = 0; i < 8; i++) {
 200:onewire/onewire.c **** 
 201:onewire/onewire.c ****         /* read byte */
 202:onewire/onewire.c ****         rom->bytewise[i] = ow_read_byte();
 203:onewire/onewire.c ****     }
 204:onewire/onewire.c **** 
 205:onewire/onewire.c ****     /* check CRC (last byte) */
 206:onewire/onewire.c ****     if (rom->crc != crc_checksum(rom->bytewise, 7))
 207:onewire/onewire.c ****         return -2;
 208:onewire/onewire.c **** 
 209:onewire/onewire.c ****     return 1;
 210:onewire/onewire.c **** 
 211:onewire/onewire.c **** } /* }}} */
 212:onewire/onewire.c **** 
 213:onewire/onewire.c **** int8_t noinline ow_skip_rom(void)
 214:onewire/onewire.c **** /* {{{ */ {
 215:onewire/onewire.c **** 
 216:onewire/onewire.c ****     /* reset the bus */
 217:onewire/onewire.c ****     if (!reset_onewire())
 218:onewire/onewire.c ****         return -1;
 219:onewire/onewire.c **** 
 220:onewire/onewire.c ****     /* transmit command byte */
 221:onewire/onewire.c ****     ow_write_byte(OW_ROM_SKIP_ROM);
 222:onewire/onewire.c **** 
 223:onewire/onewire.c ****     return 1;
 224:onewire/onewire.c **** 
 225:onewire/onewire.c **** } /* }}} */
 226:onewire/onewire.c **** 
 227:onewire/onewire.c **** int8_t noinline ow_match_rom(struct ow_rom_code_t *rom)
 228:onewire/onewire.c **** /* {{{ */ {
 229:onewire/onewire.c **** 
 230:onewire/onewire.c ****     /* reset the bus */
 231:onewire/onewire.c ****     if (!reset_onewire())
 232:onewire/onewire.c ****         return -1;
 233:onewire/onewire.c **** 
 234:onewire/onewire.c ****     /* transmit command byte */
 235:onewire/onewire.c ****     ow_write_byte(OW_ROM_MATCH_ROM);
 236:onewire/onewire.c **** 
 237:onewire/onewire.c ****     /* transmit rom code */
 238:onewire/onewire.c ****     for (uint8_t i = 0; i < 8; i++) {
 239:onewire/onewire.c **** 
 240:onewire/onewire.c ****         for (uint8_t j = 0; j < 8; j++)
 241:onewire/onewire.c ****             ow_write(rom->bytewise[i] & _BV(j));
 242:onewire/onewire.c **** 
 243:onewire/onewire.c ****     }
 244:onewire/onewire.c **** 
 245:onewire/onewire.c ****     return 1;
 246:onewire/onewire.c **** 
 247:onewire/onewire.c **** } /* }}} */
 248:onewire/onewire.c **** 
 249:onewire/onewire.c **** 
 250:onewire/onewire.c **** void noinline ow_set_address_bit(struct ow_rom_code_t *rom, uint8_t idx, uint8_t val)
 251:onewire/onewire.c **** /* {{{ */ {
 179               	.LM3:
 180               	/* prologue: frame size=0 */
 181               	/* prologue end (size=0) */
 182 0008 FC01      		movw r30,r24
 252:onewire/onewire.c **** 
 253:onewire/onewire.c ****     uint8_t byte = idx / 8;
 254:onewire/onewire.c ****     uint8_t bit = idx % 8;
 184               	.LM4:
 185 000a 862F      		mov r24,r22
 186 000c 8770      		andi r24,lo8(7)
 187 000e 6695      		lsr r22
 188 0010 6695      		lsr r22
 189 0012 6695      		lsr r22
 190 0014 7727      		clr r23
 191 0016 282F      		mov r18,r24
 192 0018 3327      		clr r19
 255:onewire/onewire.c **** 
 256:onewire/onewire.c ****     if (val == 0)
 194               	.LM5:
 195 001a 4423      		tst r20
 196 001c 69F4      		brne .L4
 257:onewire/onewire.c ****         rom->bytewise[byte] &= ~_BV(bit);
 198               	.LM6:
 199 001e E60F      		add r30,r22
 200 0020 F71F      		adc r31,r23
 201 0022 81E0      		ldi r24,lo8(1)
 202 0024 90E0      		ldi r25,hi8(1)
 203 0026 02C0      		rjmp 2f
 204 0028 880F      	1:	lsl r24
 205 002a 991F      		rol r25
 206 002c 2A95      	2:	dec r18
 207 002e E2F7      		brpl 1b
 208 0030 8095      		com r24
 209 0032 2081      		ld r18,Z
 210 0034 2823      		and r18,r24
 211 0036 0BC0      		rjmp .L8
 212               	.L4:
 258:onewire/onewire.c ****     else
 259:onewire/onewire.c ****         rom->bytewise[byte] |= _BV(bit);
 214               	.LM7:
 215 0038 E60F      		add r30,r22
 216 003a F71F      		adc r31,r23
 217 003c 81E0      		ldi r24,lo8(1)
 218 003e 90E0      		ldi r25,hi8(1)
 219 0040 02C0      		rjmp 2f
 220 0042 880F      	1:	lsl r24
 221 0044 991F      		rol r25
 222 0046 2A95      	2:	dec r18
 223 0048 E2F7      		brpl 1b
 224 004a 2081      		ld r18,Z
 225 004c 282B      		or r18,r24
 226               	.L8:
 227 004e 2083      		st Z,r18
 228 0050 0895      		ret
 229               	/* epilogue: frame size=0 */
 230               	/* epilogue: noreturn */
 231               	/* epilogue end (size=0) */
 232               	/* function ow_set_address_bit size 39 (39) */
 237               	.Lscope1:
 239               		.stabd	78,0,0
 242               	.global	ow_temp_sensor
 244               	ow_temp_sensor:
 245               		.stabd	46,0,0
 260:onewire/onewire.c **** 
 261:onewire/onewire.c **** /* }}} */ }
 262:onewire/onewire.c **** 
 263:onewire/onewire.c **** /* high-level functions */
 264:onewire/onewire.c **** int8_t noinline ow_search_rom(uint8_t first)
 265:onewire/onewire.c **** /* {{{ */ {
 266:onewire/onewire.c **** 
 267:onewire/onewire.c ****     /* reset discover state machine */
 268:onewire/onewire.c ****     if (first) {
 269:onewire/onewire.c ****         ow_global.last_discrepancy = -1;
 270:onewire/onewire.c ****         ow_global.rom_index = 0;
 271:onewire/onewire.c **** 
 272:onewire/onewire.c ****         /* reset rom code */
 273:onewire/onewire.c ****         for (uint8_t i = 0; i < 8; i++)
 274:onewire/onewire.c ****             ow_global.current_rom.bytewise[i] = 0;
 275:onewire/onewire.c **** 
 276:onewire/onewire.c ****     } else {
 277:onewire/onewire.c **** 
 278:onewire/onewire.c ****         /* if last_discrepancy is below zero, discovery is done */
 279:onewire/onewire.c ****         if (ow_global.last_discrepancy < 0)
 280:onewire/onewire.c ****             return 0;
 281:onewire/onewire.c **** 
 282:onewire/onewire.c ****     }
 283:onewire/onewire.c **** 
 284:onewire/onewire.c ****     uint8_t discrepancy = -1;
 285:onewire/onewire.c **** 
 286:onewire/onewire.c ****     /* reset the bus */
 287:onewire/onewire.c ****     if (!reset_onewire())
 288:onewire/onewire.c ****         return -1;
 289:onewire/onewire.c **** 
 290:onewire/onewire.c ****     /* transmit command byte */
 291:onewire/onewire.c ****     ow_write_byte(OW_ROM_SEARCH_ROM);
 292:onewire/onewire.c **** 
 293:onewire/onewire.c ****     for (uint8_t i = 0; i <64; i++) {
 294:onewire/onewire.c **** 
 295:onewire/onewire.c ****         /* read bits */
 296:onewire/onewire.c ****         uint8_t bit1 = ow_read();
 297:onewire/onewire.c ****         uint8_t bits = (ow_read() << 1) | bit1;
 298:onewire/onewire.c **** 
 299:onewire/onewire.c ****         if (bits == 3) {
 300:onewire/onewire.c **** 
 301:onewire/onewire.c ****             /* no devices, just return */
 302:onewire/onewire.c ****             return 0;
 303:onewire/onewire.c **** 
 304:onewire/onewire.c ****         } else if (bits == 0) {
 305:onewire/onewire.c **** 
 306:onewire/onewire.c ****             if (i == ow_global.last_discrepancy) {
 307:onewire/onewire.c **** 
 308:onewire/onewire.c ****                 /* set one */
 309:onewire/onewire.c ****                 ow_set_address_bit(&ow_global.current_rom, i, 1);
 310:onewire/onewire.c **** 
 311:onewire/onewire.c ****                 /* transmit one next time */
 312:onewire/onewire.c ****                 bit1 = 1;
 313:onewire/onewire.c **** 
 314:onewire/onewire.c ****             } else if (i > ow_global.last_discrepancy) {
 315:onewire/onewire.c **** 
 316:onewire/onewire.c ****                 /* set zero */
 317:onewire/onewire.c ****                 ow_set_address_bit(&ow_global.current_rom, i, 0);
 318:onewire/onewire.c ****                 discrepancy = i;
 319:onewire/onewire.c **** 
 320:onewire/onewire.c ****             } else {
 321:onewire/onewire.c **** 
 322:onewire/onewire.c ****                 uint8_t rom_bit = ow_global.current_rom.bytewise[i / 8] & _BV(i % 8);
 323:onewire/onewire.c **** 
 324:onewire/onewire.c ****                 if (rom_bit == 0)
 325:onewire/onewire.c ****                     discrepancy = i;
 326:onewire/onewire.c **** 
 327:onewire/onewire.c ****                 /* transmit last bit next time */
 328:onewire/onewire.c ****                 bit1 = rom_bit;
 329:onewire/onewire.c **** 
 330:onewire/onewire.c ****             }
 331:onewire/onewire.c **** 
 332:onewire/onewire.c ****         } else {
 333:onewire/onewire.c **** 
 334:onewire/onewire.c ****             /* normal case, no discrepancy */
 335:onewire/onewire.c ****             ow_set_address_bit(&ow_global.current_rom, i, bit1);
 336:onewire/onewire.c **** 
 337:onewire/onewire.c ****         }
 338:onewire/onewire.c **** 
 339:onewire/onewire.c ****         OW_CONFIG_OUTPUT();
 340:onewire/onewire.c **** 
 341:onewire/onewire.c ****         /* select next bit */
 342:onewire/onewire.c ****         ow_write(bit1);
 343:onewire/onewire.c **** 
 344:onewire/onewire.c ****     }
 345:onewire/onewire.c **** 
 346:onewire/onewire.c ****     ow_global.last_discrepancy = discrepancy;
 347:onewire/onewire.c **** 
 348:onewire/onewire.c ****     /* new device discovered */
 349:onewire/onewire.c ****     return 1;
 350:onewire/onewire.c **** 
 351:onewire/onewire.c **** } /* }}} */
 352:onewire/onewire.c **** 
 353:onewire/onewire.c **** /*
 354:onewire/onewire.c ****  *
 355:onewire/onewire.c ****  * temperature functions
 356:onewire/onewire.c ****  *
 357:onewire/onewire.c ****  */
 358:onewire/onewire.c **** 
 359:onewire/onewire.c **** int8_t ow_temp_sensor(struct ow_rom_code_t *rom)
 360:onewire/onewire.c **** /* {{{ */ {
 247               	.LM8:
 248               	/* prologue: frame size=0 */
 249               	/* prologue end (size=0) */
 250 0052 FC01      		movw r30,r24
 361:onewire/onewire.c **** 
 362:onewire/onewire.c ****     /* check for known family code */
 363:onewire/onewire.c ****     if (rom->family == OW_FAMILY_DS1820 ||
 252               	.LM9:
 253 0054 E081      		ld r30,Z
 254 0056 E031      		cpi r30,lo8(16)
 255 0058 19F4      		brne .L10
 257               	.LM10:
 258 005a 81E0      		ldi r24,lo8(1)
 259 005c 90E0      		ldi r25,hi8(1)
 260 005e 0895      		ret
 261               	.L10:
 262 0060 80E0      		ldi r24,lo8(0)
 263 0062 90E0      		ldi r25,hi8(0)
 264 0064 E232      		cpi r30,lo8(34)
 265 0066 11F4      		brne .L12
 266 0068 81E0      		ldi r24,lo8(1)
 267 006a 90E0      		ldi r25,hi8(1)
 268               	.L12:
 364:onewire/onewire.c ****             rom->family == OW_FAMILY_DS1822)
 365:onewire/onewire.c ****         return 1;
 366:onewire/onewire.c **** 
 367:onewire/onewire.c ****     return 0;
 368:onewire/onewire.c **** 
 369:onewire/onewire.c **** } /* }}} */
 270               	.LM11:
 271 006c 0895      		ret
 272               	/* epilogue: frame size=0 */
 273               	/* epilogue: noreturn */
 274               	/* epilogue end (size=0) */
 275               	/* function ow_temp_sensor size 14 (14) */
 277               	.Lscope2:
 279               		.stabd	78,0,0
 283               	.global	ow_temp_normalize
 285               	ow_temp_normalize:
 286               		.stabd	46,0,0
 370:onewire/onewire.c **** 
 371:onewire/onewire.c **** int8_t ow_temp_start_convert(struct ow_rom_code_t *rom, uint8_t wait)
 372:onewire/onewire.c **** /* {{{ */ {
 373:onewire/onewire.c **** 
 374:onewire/onewire.c ****     int8_t ret;
 375:onewire/onewire.c **** 
 376:onewire/onewire.c ****     if (rom == NULL)
 377:onewire/onewire.c ****         ret = ow_skip_rom();
 378:onewire/onewire.c ****     else {
 379:onewire/onewire.c **** 
 380:onewire/onewire.c ****         /* check for known family code */
 381:onewire/onewire.c ****         if (!ow_temp_sensor(rom))
 382:onewire/onewire.c ****             return -2;
 383:onewire/onewire.c **** 
 384:onewire/onewire.c ****         ret = ow_match_rom(rom);
 385:onewire/onewire.c **** 
 386:onewire/onewire.c ****     }
 387:onewire/onewire.c **** 
 388:onewire/onewire.c ****     if (ret < 0)
 389:onewire/onewire.c ****         return ret;
 390:onewire/onewire.c **** 
 391:onewire/onewire.c ****     /* transmit command byte */
 392:onewire/onewire.c ****     ow_write_byte(OW_FUNC_CONVERT);
 393:onewire/onewire.c **** 
 394:onewire/onewire.c ****     OW_CONFIG_OUTPUT();
 395:onewire/onewire.c ****     OW_HIGH();
 396:onewire/onewire.c **** 
 397:onewire/onewire.c ****     if (!wait)
 398:onewire/onewire.c ****         return 0;
 399:onewire/onewire.c **** 
 400:onewire/onewire.c ****     while(!ow_read());
 401:onewire/onewire.c **** 
 402:onewire/onewire.c ****     return 1;
 403:onewire/onewire.c **** 
 404:onewire/onewire.c **** } /* }}} */
 405:onewire/onewire.c **** 
 406:onewire/onewire.c **** int8_t ow_temp_read_scratchpad(struct ow_rom_code_t *rom, struct ow_temp_scratchpad_t *scratchpad)
 407:onewire/onewire.c **** /* {{{ */ {
 408:onewire/onewire.c **** 
 409:onewire/onewire.c ****     int8_t ret;
 410:onewire/onewire.c **** 
 411:onewire/onewire.c ****     if (rom == NULL)
 412:onewire/onewire.c ****         ret = ow_skip_rom();
 413:onewire/onewire.c ****     else {
 414:onewire/onewire.c **** 
 415:onewire/onewire.c ****         /* check for known family code */
 416:onewire/onewire.c ****         if (!ow_temp_sensor(rom))
 417:onewire/onewire.c ****             return -3;
 418:onewire/onewire.c **** 
 419:onewire/onewire.c ****         ret = ow_match_rom(rom);
 420:onewire/onewire.c ****     }
 421:onewire/onewire.c **** 
 422:onewire/onewire.c ****     if (ret < 0)
 423:onewire/onewire.c ****         return ret;
 424:onewire/onewire.c **** 
 425:onewire/onewire.c ****     /* transmit command byte */
 426:onewire/onewire.c ****     ow_write_byte(OW_FUNC_READ_SP);
 427:onewire/onewire.c **** 
 428:onewire/onewire.c ****     for (uint8_t i = 0; i < 9; i++) {
 429:onewire/onewire.c **** 
 430:onewire/onewire.c ****         /* read byte */
 431:onewire/onewire.c ****         scratchpad->bytewise[i] = ow_read_byte();
 432:onewire/onewire.c **** 
 433:onewire/onewire.c ****     }
 434:onewire/onewire.c **** 
 435:onewire/onewire.c ****     /* check CRC (last byte) */
 436:onewire/onewire.c ****     if (scratchpad->crc != crc_checksum(&scratchpad->bytewise, 8))
 437:onewire/onewire.c ****         return -2;
 438:onewire/onewire.c **** 
 439:onewire/onewire.c ****     return 1;
 440:onewire/onewire.c **** 
 441:onewire/onewire.c **** } /* }}} */
 442:onewire/onewire.c **** 
 443:onewire/onewire.c **** int8_t ow_temp_power(struct ow_rom_code_t *rom)
 444:onewire/onewire.c **** /* {{{ */ {
 445:onewire/onewire.c **** 
 446:onewire/onewire.c ****     int8_t ret;
 447:onewire/onewire.c **** 
 448:onewire/onewire.c ****     if (rom == NULL)
 449:onewire/onewire.c ****         ret = ow_skip_rom();
 450:onewire/onewire.c ****     else {
 451:onewire/onewire.c ****         if (!ow_temp_sensor(rom))
 452:onewire/onewire.c ****             return -2;
 453:onewire/onewire.c **** 
 454:onewire/onewire.c ****         ret = ow_match_rom(rom);
 455:onewire/onewire.c ****     }
 456:onewire/onewire.c **** 
 457:onewire/onewire.c ****     if (ret < 0)
 458:onewire/onewire.c ****         return ret;
 459:onewire/onewire.c **** 
 460:onewire/onewire.c ****     /* transmit command byte */
 461:onewire/onewire.c ****     ow_write_byte(OW_FUNC_READ_POWER);
 462:onewire/onewire.c **** 
 463:onewire/onewire.c ****     return ow_read();
 464:onewire/onewire.c **** 
 465:onewire/onewire.c **** } /* }}} */
 466:onewire/onewire.c **** 
 467:onewire/onewire.c **** int16_t ow_temp_normalize(struct ow_rom_code_t *rom, struct ow_temp_scratchpad_t *sp)
 468:onewire/onewire.c **** /* {{{ */ {
 288               	.LM12:
 289               	/* prologue: frame size=0 */
 290               	/* prologue end (size=0) */
 291 006e FC01      		movw r30,r24
 292 0070 DB01      		movw r26,r22
 469:onewire/onewire.c **** 
 470:onewire/onewire.c ****     if (rom->family == OW_FAMILY_DS1820)
 294               	.LM13:
 295 0072 E081      		ld r30,Z
 296 0074 E031      		cpi r30,lo8(16)
 297 0076 41F4      		brne .L16
 471:onewire/onewire.c ****         return sp->temperature << 7;
 299               	.LM14:
 300 0078 8D91      		ld r24,X+
 301 007a 9C91      		ld r25,X
 302 007c 9695      		lsr r25
 303 007e 982F      		mov r25,r24
 304 0080 8827      		clr r24
 305 0082 9795      		ror r25
 306 0084 8795      		ror r24
 307 0086 0895      		ret
 308               	.L16:
 472:onewire/onewire.c ****     else if (rom->family == OW_FAMILY_DS1822)
 310               	.LM15:
 311 0088 E232      		cpi r30,lo8(34)
 312 008a 19F0      		breq .L19
 313 008c 8FEF      		ldi r24,lo8(-1)
 314 008e 9FEF      		ldi r25,hi8(-1)
 315 0090 0895      		ret
 316               	.L19:
 473:onewire/onewire.c ****         return sp->temperature << 4;
 318               	.LM16:
 319 0092 8D91      		ld r24,X+
 320 0094 9C91      		ld r25,X
 321 0096 24E0      		ldi r18,4
 322 0098 880F      	1:	lsl r24
 323 009a 991F      		rol r25
 324 009c 2A95      		dec r18
 325 009e E1F7      		brne 1b
 474:onewire/onewire.c ****     else
 475:onewire/onewire.c ****         return 0xffff;
 476:onewire/onewire.c **** 
 477:onewire/onewire.c **** } /* }}} */
 327               	.LM17:
 328 00a0 0895      		ret
 329               	/* epilogue: frame size=0 */
 330               	/* epilogue: noreturn */
 331               	/* epilogue end (size=0) */
 332               	/* function ow_temp_normalize size 26 (26) */
 334               	.Lscope3:
 336               		.stabd	78,0,0
 338               	.global	reset_onewire
 340               	reset_onewire:
 341               		.stabd	46,0,0
 343               	.LM18:
 344               	/* prologue: frame size=0 */
 345               	/* prologue end (size=0) */
 347               	.LM19:
 348 00a2 569A      		sbi 42-0x20,6
 350               	.LM20:
 351 00a4 5E98      		cbi 43-0x20,6
 352               	.LBB8:
 353               	.LBB9:
 355               	.Ltext1:
   1:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****    All rights reserved.
   4:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
   5:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
   8:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  11:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****      distribution.
  15:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  16:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  20:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  32:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** /* $Id: delay.h,v 1.1.2.1 2005/12/12 23:19:49 joerg_wunsch Exp $ */
  33:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  34:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  35:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  36:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  37:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  38:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  39:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Busy-wait delay loops
  40:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     \code
  41:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  42:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  43:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  44:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     \endcode
  45:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  47:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  48:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  49:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     used.
  50:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  51:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     The functions in this header file implement simple delay loops
  52:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     that perform a busy-waiting.  They are typically used to
  53:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     facilitate short delays in the program execution.  They are
  54:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     implemented as count-down loops with a well-known CPU cycle
  55:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     count per loop iteration.  As such, no other processing can
  56:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     occur simultaneously.  It should be kept in mind that the
  57:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     functions described here do not disable interrupts.
  58:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     In general, for long delays, the use of hardware timers is
  60:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     much preferrable, as they free the CPU, and allow for
  61:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     concurrent processing of other events while the timer is
  62:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     running.  However, in particular for very short delays, the
  63:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     overhead of setting up a hardware timer is too much compared
  64:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     to the overall delay time.
  65:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  66:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     Two inline functions are provided for the actual delay algorithms.
  67:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     Two wrapper functions allow the specification of microsecond, and
  69:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  70:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).  These functions
  71:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     operate on double typed arguments, however when optimization is
  72:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     turned on, the entire floating-point calculation will be done at
  73:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     compile-time.
  74:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  75:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     \note When using _delay_us() and _delay_ms(), the expressions
  76:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     passed as arguments to these functions shall be compile-time
  77:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     constants, otherwise the floating-point calculations to setup the
  78:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     loops will be done at run-time, thereby drastically increasing
  79:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     both the resulting code size, as well as the time required to
  80:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     setup the loops.
  81:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  87:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  88:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** #endif
  89:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  90:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** /** \ingroup util_delay
  91:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  92:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  93:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     iterations are possible.  (The value 256 would have to be passed
  94:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  95:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     including the overhead the compiler needs to setup the counter
  96:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     register.
  97:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  99:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     can be achieved.
 100:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** */
 101:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** void
 102:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** _delay_loop_1(uint8_t __count)
 103:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** {
 104:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 	__asm__ volatile (
 105:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 		"1: dec %0" "\n\t"
 106:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 		"brne 1b"
 107:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 		: "=r" (__count)
 108:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 		: "0" (__count)
 109:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 	);
 110:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** }
 111:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** /** \ingroup util_delay
 113:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
 115:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     iterations are possible.  (The value 65536 would have to be
 116:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
 117:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     not including the overhead the compiler requires to setup the
 118:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     counter register pair.
 119:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 121:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     milliseconds can be achieved.
 122:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****  */
 123:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** void
 124:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** _delay_loop_2(uint16_t __count)
 125:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** {
 126:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 	__asm__ volatile (
 357               	.LM21:
 358 00a6 80E6      		ldi r24,lo8(2400)
 359 00a8 99E0      		ldi r25,hi8(2400)
 360               	/* #APP */
 361 00aa 0197      		1: sbiw r24,1
 362 00ac F1F7      		brne 1b
 363               	/* #NOAPP */
 364               	.LBE9:
 365               	.LBE8:
 367               	.Ltext2:
 369               	.LM22:
 370 00ae 5E9A      		sbi 43-0x20,6
 372               	.LM23:
 373 00b0 5E9A      		sbi 43-0x20,6
 374 00b2 5698      		cbi 42-0x20,6
 375               	.LBB10:
 376               	.LBB11:
 378               	.Ltext3:
 380               	.LM24:
 381 00b4 82EC      		ldi r24,lo8(450)
 382 00b6 91E0      		ldi r25,hi8(450)
 383               	/* #APP */
 384 00b8 0197      		1: sbiw r24,1
 385 00ba F1F7      		brne 1b
 386               	/* #NOAPP */
 387               	.LBE11:
 388               	.LBE10:
 390               	.Ltext4:
 392               	.LM25:
 393 00bc 29B1      		in r18,41-0x20
 394               	.LBB12:
 395               	.LBB13:
 397               	.Ltext5:
 399               	.LM26:
 400 00be 8EE9      		ldi r24,lo8(1950)
 401 00c0 97E0      		ldi r25,hi8(1950)
 402               	/* #APP */
 403 00c2 0197      		1: sbiw r24,1
 404 00c4 F1F7      		brne 1b
 405               	/* #NOAPP */
 406               	.LBE13:
 407               	.LBE12:
 409               	.Ltext6:
 411               	.LM27:
 412 00c6 89B1      		in r24,41-0x20
 414               	.LM28:
 415 00c8 26FF      		sbrs r18,6
 416 00ca 03C0      		rjmp .L23
 418               	.LM29:
 419 00cc 80E0      		ldi r24,lo8(0)
 420 00ce 90E0      		ldi r25,hi8(0)
 421 00d0 0895      		ret
 422               	.L23:
 423 00d2 90E0      		ldi r25,lo8(0)
 424 00d4 86FF      		sbrs r24,6
 425 00d6 91E0      		ldi r25,lo8(1)
 426               	.L26:
 427 00d8 81E0      		ldi r24,lo8(1)
 428 00da 9827      		eor r25,r24
 429 00dc 892F      		mov r24,r25
 430 00de 9927      		clr r25
 432               	.LM30:
 433 00e0 0895      		ret
 434               	/* epilogue: frame size=0 */
 435               	/* epilogue: noreturn */
 436               	/* epilogue end (size=0) */
 437               	/* function reset_onewire size 39 (39) */
 448               	.Lscope4:
 450               		.stabd	78,0,0
 452               	.global	ow_write_0
 454               	ow_write_0:
 455               		.stabd	46,0,0
 457               	.LM31:
 458               	/* prologue: frame size=0 */
 459               	/* prologue end (size=0) */
 461               	.LM32:
 462 00e2 5E98      		cbi 43-0x20,6
 463               	.LBB16:
 464               	.LBB17:
 466               	.Ltext7:
 468               	.LM33:
 469 00e4 84EA      		ldi r24,lo8(420)
 470 00e6 91E0      		ldi r25,hi8(420)
 471               	/* #APP */
 472 00e8 0197      		1: sbiw r24,1
 473 00ea F1F7      		brne 1b
 474               	/* #NOAPP */
 475               	.LBE17:
 476               	.LBE16:
 478               	.Ltext8:
 480               	.LM34:
 481 00ec 5E9A      		sbi 43-0x20,6
 482               	/* epilogue: frame size=0 */
 483 00ee 0895      		ret
 484               	/* epilogue end (size=1) */
 485               	/* function ow_write_0 size 9 (8) */
 490               	.Lscope5:
 492               		.stabd	78,0,0
 494               	.global	ow_write_1
 496               	ow_write_1:
 497               		.stabd	46,0,0
 499               	.LM35:
 500               	/* prologue: frame size=0 */
 501               	/* prologue end (size=0) */
 503               	.LM36:
 504 00f0 5E98      		cbi 43-0x20,6
 505               	.LBB22:
 506               	.LBB23:
 508               	.Ltext9:
 510               	.LM37:
 511 00f2 84E1      		ldi r24,lo8(20)
 512 00f4 90E0      		ldi r25,hi8(20)
 513               	/* #APP */
 514 00f6 0197      		1: sbiw r24,1
 515 00f8 F1F7      		brne 1b
 516               	/* #NOAPP */
 517               	.LBE23:
 518               	.LBE22:
 520               	.Ltext10:
 522               	.LM38:
 523 00fa 5E9A      		sbi 43-0x20,6
 524               	.LBB24:
 525               	.LBB25:
 527               	.Ltext11:
 529               	.LM39:
 530 00fc 80E9      		ldi r24,lo8(400)
 531 00fe 91E0      		ldi r25,hi8(400)
 532               	/* #APP */
 533 0100 0197      		1: sbiw r24,1
 534 0102 F1F7      		brne 1b
 535               	/* #NOAPP */
 536               	.LBE25:
 537               	.LBE24:
 538               	/* epilogue: frame size=0 */
 539 0104 0895      		ret
 540               	/* epilogue end (size=1) */
 541               	/* function ow_write_1 size 15 (14) */
 549               	.Lscope6:
 551               		.stabd	78,0,0
 554               	.global	ow_write
 556               	ow_write:
 557               		.stabd	46,0,0
 559               	.Ltext12:
 561               	.LM40:
 562               	/* prologue: frame size=0 */
 563               	/* prologue end (size=0) */
 565               	.LM41:
 566 0106 8823      		tst r24
 567 0108 19F0      		breq .L33
 569               	.LM42:
 570 010a 0E94 0000 		call ow_write_1
 571 010e 0895      		ret
 572               	.L33:
 574               	.LM43:
 575 0110 0E94 0000 		call ow_write_0
 576 0114 0895      		ret
 577               	/* epilogue: frame size=0 */
 578               	/* epilogue: noreturn */
 579               	/* epilogue end (size=0) */
 580               	/* function ow_write size 8 (8) */
 582               	.Lscope7:
 584               		.stabd	78,0,0
 587               	.global	ow_write_byte
 589               	ow_write_byte:
 590               		.stabd	46,0,0
 592               	.LM44:
 593               	/* prologue: frame size=0 */
 594 0116 1F93      		push r17
 595 0118 CF93      		push r28
 596 011a DF93      		push r29
 597               	/* prologue end (size=3) */
 598 011c 182F      		mov r17,r24
 600               	.LM45:
 601 011e 569A      		sbi 42-0x20,6
 602 0120 C0E0      		ldi r28,lo8(0)
 603 0122 D0E0      		ldi r29,hi8(0)
 604               	.L38:
 605               	.LBB27:
 607               	.LM46:
 608 0124 81E0      		ldi r24,lo8(1)
 609 0126 90E0      		ldi r25,hi8(1)
 610 0128 0C2E      		mov r0,r28
 611 012a 02C0      		rjmp 2f
 612 012c 880F      	1:	lsl r24
 613 012e 991F      		rol r25
 614 0130 0A94      	2:	dec r0
 615 0132 E2F7      		brpl 1b
 616 0134 8123      		and r24,r17
 617 0136 0E94 0000 		call ow_write
 618 013a 2196      		adiw r28,1
 620               	.LM47:
 621 013c C830      		cpi r28,8
 622 013e D105      		cpc r29,__zero_reg__
 623 0140 89F7      		brne .L38
 624               	.LBE27:
 625               	/* epilogue: frame size=0 */
 626 0142 DF91      		pop r29
 627 0144 CF91      		pop r28
 628 0146 1F91      		pop r17
 629 0148 0895      		ret
 630               	/* epilogue end (size=4) */
 631               	/* function ow_write_byte size 26 (19) */
 633               	.Lscope8:
 635               		.stabd	78,0,0
 638               	.global	ow_match_rom
 640               	ow_match_rom:
 641               		.stabd	46,0,0
 643               	.LM48:
 644               	/* prologue: frame size=0 */
 645 014a FF92      		push r15
 646 014c 0F93      		push r16
 647 014e 1F93      		push r17
 648 0150 CF93      		push r28
 649 0152 DF93      		push r29
 650               	/* prologue end (size=5) */
 651 0154 EC01      		movw r28,r24
 653               	.LM49:
 654 0156 0E94 0000 		call reset_onewire
 655 015a 8823      		tst r24
 656 015c 19F4      		brne .L44
 658               	.LM50:
 659 015e 8FEF      		ldi r24,lo8(-1)
 660 0160 9FEF      		ldi r25,hi8(-1)
 661 0162 23C0      		rjmp .L46
 662               	.L44:
 664               	.LM51:
 665 0164 85E5      		ldi r24,lo8(85)
 666 0166 0E94 0000 		call ow_write_byte
 667 016a 8E01      		movw r16,r28
 668 016c FF24      		clr r15
 669 016e 1AC0      		rjmp .L47
 670               	.L52:
 671               	.LBB30:
 673               	.LM52:
 674 0170 81E0      		ldi r24,lo8(1)
 675 0172 90E0      		ldi r25,hi8(1)
 676 0174 1AC0      		rjmp .L46
 677               	.L48:
 678               	.LBB31:
 680               	.LM53:
 681 0176 21E0      		ldi r18,lo8(1)
 682 0178 30E0      		ldi r19,hi8(1)
 683 017a 0C2E      		mov r0,r28
 684 017c 02C0      		rjmp 2f
 685 017e 220F      	1:	lsl r18
 686 0180 331F      		rol r19
 687 0182 0A94      	2:	dec r0
 688 0184 E2F7      		brpl 1b
 689 0186 F801      		movw r30,r16
 690 0188 8081      		ld r24,Z
 691 018a 8223      		and r24,r18
 692 018c 0E94 0000 		call ow_write
 693 0190 2196      		adiw r28,1
 695               	.LM54:
 696 0192 C830      		cpi r28,8
 697 0194 D105      		cpc r29,__zero_reg__
 698 0196 79F7      		brne .L48
 699               	.LBE31:
 701               	.LM55:
 702 0198 F394      		inc r15
 703 019a 0F5F      		subi r16,lo8(-(1))
 704 019c 1F4F      		sbci r17,hi8(-(1))
 705 019e F8E0      		ldi r31,lo8(8)
 706 01a0 FF16      		cp r15,r31
 707 01a2 31F3      		breq .L52
 708               	.L47:
 709 01a4 C0E0      		ldi r28,lo8(0)
 710 01a6 D0E0      		ldi r29,hi8(0)
 711 01a8 E6CF      		rjmp .L48
 712               	.L46:
 713               	.LBE30:
 714               	/* epilogue: frame size=0 */
 715 01aa DF91      		pop r29
 716 01ac CF91      		pop r28
 717 01ae 1F91      		pop r17
 718 01b0 0F91      		pop r16
 719 01b2 FF90      		pop r15
 720 01b4 0895      		ret
 721               	/* epilogue end (size=6) */
 722               	/* function ow_match_rom size 54 (43) */
 727               	.Lscope9:
 729               		.stabd	78,0,0
 731               	.global	ow_skip_rom
 733               	ow_skip_rom:
 734               		.stabd	46,0,0
 736               	.LM56:
 737               	/* prologue: frame size=0 */
 738               	/* prologue end (size=0) */
 740               	.LM57:
 741 01b6 0E94 0000 		call reset_onewire
 742 01ba 8823      		tst r24
 743 01bc 19F4      		brne .L56
 745               	.LM58:
 746 01be 8FEF      		ldi r24,lo8(-1)
 747 01c0 9FEF      		ldi r25,hi8(-1)
 748 01c2 0895      		ret
 749               	.L56:
 751               	.LM59:
 752 01c4 8CEC      		ldi r24,lo8(-52)
 753 01c6 0E94 0000 		call ow_write_byte
 754 01ca 81E0      		ldi r24,lo8(1)
 755 01cc 90E0      		ldi r25,hi8(1)
 757               	.LM60:
 758 01ce 0895      		ret
 759               	/* epilogue: frame size=0 */
 760               	/* epilogue: noreturn */
 761               	/* epilogue end (size=0) */
 762               	/* function ow_skip_rom size 13 (13) */
 764               	.Lscope10:
 766               		.stabd	78,0,0
 768               	.global	ow_read
 770               	ow_read:
 771               		.stabd	46,0,0
 773               	.LM61:
 774               	/* prologue: frame size=0 */
 775               	/* prologue end (size=0) */
 777               	.LM62:
 778 01d0 569A      		sbi 42-0x20,6
 780               	.LM63:
 781 01d2 5E98      		cbi 43-0x20,6
 782               	.LBB38:
 783               	.LBB39:
 785               	.Ltext13:
 787               	.LM64:
 788 01d4 85E0      		ldi r24,lo8(5)
 789 01d6 90E0      		ldi r25,hi8(5)
 790               	/* #APP */
 791 01d8 0197      		1: sbiw r24,1
 792 01da F1F7      		brne 1b
 793               	/* #NOAPP */
 794               	.LBE39:
 795               	.LBE38:
 797               	.Ltext14:
 799               	.LM65:
 800 01dc 5E9A      		sbi 43-0x20,6
 802               	.LM66:
 803 01de 5E9A      		sbi 43-0x20,6
 804 01e0 5698      		cbi 42-0x20,6
 805               	.LBB40:
 806               	.LBB41:
 808               	.Ltext15:
 810               	.LM67:
 811 01e2 86E4      		ldi r24,lo8(70)
 812 01e4 90E0      		ldi r25,hi8(70)
 813               	/* #APP */
 814 01e6 0197      		1: sbiw r24,1
 815 01e8 F1F7      		brne 1b
 816               	/* #NOAPP */
 817               	.LBE41:
 818               	.LBE40:
 820               	.Ltext16:
 822               	.LM68:
 823 01ea 29B1      		in r18,41-0x20
 824               	.LBB42:
 825               	.LBB43:
 827               	.Ltext17:
 829               	.LM69:
 830 01ec 85E4      		ldi r24,lo8(325)
 831 01ee 91E0      		ldi r25,hi8(325)
 832               	/* #APP */
 833 01f0 0197      		1: sbiw r24,1
 834 01f2 F1F7      		brne 1b
 835               	/* #NOAPP */
 836 01f4 80E0      		ldi r24,lo8(0)
 837 01f6 90E0      		ldi r25,hi8(0)
 838 01f8 26FF      		sbrs r18,6
 839 01fa 02C0      		rjmp .L61
 841               	.LM70:
 842 01fc 81E0      		ldi r24,lo8(1)
 843 01fe 90E0      		ldi r25,hi8(1)
 844               	.L61:
 845               	.LBE43:
 846               	.LBE42:
 848               	.Ltext18:
 850               	.LM71:
 851 0200 0895      		ret
 852               	/* epilogue: frame size=0 */
 853               	/* epilogue: noreturn */
 854               	/* epilogue end (size=0) */
 855               	/* function ow_read size 31 (31) */
 866               	.Lscope11:
 868               		.stabd	78,0,0
 871               	.global	ow_search_rom
 873               	ow_search_rom:
 874               		.stabd	46,0,0
 876               	.LM72:
 877               	/* prologue: frame size=0 */
 878 0202 FF92      		push r15
 879 0204 0F93      		push r16
 880 0206 1F93      		push r17
 881 0208 CF93      		push r28
 882 020a DF93      		push r29
 883               	/* prologue end (size=5) */
 885               	.LM73:
 886 020c 8823      		tst r24
 887 020e 69F0      		breq .L64
 889               	.LM74:
 890 0210 8FEF      		ldi r24,lo8(-1)
 891 0212 8093 0000 		sts ow_global,r24
 893               	.LM75:
 894 0216 1092 0000 		sts ow_global+1,__zero_reg__
 895 021a E0E0      		ldi r30,lo8(ow_global+2)
 896 021c F0E0      		ldi r31,hi8(ow_global+2)
 897               	.L66:
 898               	.LBB48:
 900               	.LM76:
 901 021e 1192      		st Z+,__zero_reg__
 903               	.LM77:
 904 0220 80E0      		ldi r24,hi8(ow_global+10)
 905 0222 E030      		cpi r30,lo8(ow_global+10)
 906 0224 F807      		cpc r31,r24
 907 0226 29F0      		breq .L67
 908 0228 FACF      		rjmp .L66
 909               	.L64:
 910               	.LBE48:
 912               	.LM78:
 913 022a 8091 0000 		lds r24,ow_global
 914 022e 87FD      		sbrc r24,7
 915 0230 63C0      		rjmp .L68
 916               	.L67:
 918               	.LM79:
 919 0232 0E94 0000 		call reset_onewire
 920 0236 8823      		tst r24
 921 0238 19F4      		brne .L69
 922 023a 8FEF      		ldi r24,lo8(-1)
 923 023c 9FEF      		ldi r25,hi8(-1)
 924 023e 5EC0      		rjmp .L71
 925               	.L69:
 927               	.LM80:
 928 0240 80EF      		ldi r24,lo8(-16)
 929 0242 0E94 0000 		call ow_write_byte
 930 0246 4FEF      		ldi r20,lo8(-1)
 931 0248 F42E      		mov r15,r20
 932 024a C0E0      		ldi r28,lo8(0)
 933 024c D0E0      		ldi r29,hi8(0)
 934               	.L72:
 935 024e 0C2F      		mov r16,r28
 936               	.LBB49:
 937               	.LBB50:
 939               	.LM81:
 940 0250 0E94 0000 		call ow_read
 941 0254 182F      		mov r17,r24
 943               	.LM82:
 944 0256 0E94 0000 		call ow_read
 945 025a 880F      		lsl r24
 946 025c 812B      		or r24,r17
 948               	.LM83:
 949 025e 8330      		cpi r24,lo8(3)
 950 0260 09F4      		brne .+2
 951 0262 4AC0      		rjmp .L68
 953               	.LM84:
 954 0264 8823      		tst r24
 955 0266 A1F5      		brne .L74
 957               	.LM85:
 958 0268 8091 0000 		lds r24,ow_global
 959 026c 9927      		clr r25
 960 026e 87FD      		sbrc r24,7
 961 0270 9095      		com r25
 962 0272 C817      		cp r28,r24
 963 0274 D907      		cpc r29,r25
 964 0276 41F4      		brne .L76
 966               	.LM86:
 967 0278 41E0      		ldi r20,lo8(1)
 968 027a 6C2F      		mov r22,r28
 969 027c 80E0      		ldi r24,lo8(ow_global+2)
 970 027e 90E0      		ldi r25,hi8(ow_global+2)
 971 0280 0E94 0000 		call ow_set_address_bit
 972 0284 11E0      		ldi r17,lo8(1)
 973 0286 2AC0      		rjmp .L78
 974               	.L76:
 976               	.LM87:
 977 0288 8C17      		cp r24,r28
 978 028a 9D07      		cpc r25,r29
 979 028c 44F4      		brge .L79
 981               	.LM88:
 982 028e 40E0      		ldi r20,lo8(0)
 983 0290 6C2F      		mov r22,r28
 984 0292 80E0      		ldi r24,lo8(ow_global+2)
 985 0294 90E0      		ldi r25,hi8(ow_global+2)
 986 0296 0E94 0000 		call ow_set_address_bit
 987 029a FC2E      		mov r15,r28
 988 029c 1FC0      		rjmp .L78
 989               	.L79:
 990               	.LBB51:
 992               	.LM89:
 993 029e 0695      		lsr r16
 994 02a0 0695      		lsr r16
 995 02a2 0695      		lsr r16
 996 02a4 E02F      		mov r30,r16
 997 02a6 FF27      		clr r31
 998 02a8 E050      		subi r30,lo8(-(ow_global))
 999 02aa F040      		sbci r31,hi8(-(ow_global))
 1000 02ac 9E01      		movw r18,r28
 1001 02ae 2770      		andi r18,lo8(7)
 1002 02b0 3070      		andi r19,hi8(7)
 1003 02b2 81E0      		ldi r24,lo8(1)
 1004 02b4 90E0      		ldi r25,hi8(1)
 1005 02b6 02C0      		rjmp 2f
 1006 02b8 880F      	1:	lsl r24
 1007 02ba 991F      		rol r25
 1008 02bc 2A95      	2:	dec r18
 1009 02be E2F7      		brpl 1b
 1010 02c0 4281      		ldd r20,Z+2
 1011 02c2 4823      		and r20,r24
 1013               	.LM90:
 1014 02c4 19F4      		brne .L81
 1015 02c6 FC2E      		mov r15,r28
 1016 02c8 10E0      		ldi r17,lo8(0)
 1017 02ca 08C0      		rjmp .L78
 1018               	.L81:
 1019 02cc 142F      		mov r17,r20
 1020 02ce 06C0      		rjmp .L78
 1021               	.L74:
 1022               	.LBE51:
 1024               	.LM91:
 1025 02d0 412F      		mov r20,r17
 1026 02d2 6C2F      		mov r22,r28
 1027 02d4 80E0      		ldi r24,lo8(ow_global+2)
 1028 02d6 90E0      		ldi r25,hi8(ow_global+2)
 1029 02d8 0E94 0000 		call ow_set_address_bit
 1030               	.L78:
 1032               	.LM92:
 1033 02dc 569A      		sbi 42-0x20,6
 1035               	.LM93:
 1036 02de 812F      		mov r24,r17
 1037 02e0 0E94 0000 		call ow_write
 1038 02e4 2196      		adiw r28,1
 1039               	.LBE50:
 1041               	.LM94:
 1042 02e6 C034      		cpi r28,64
 1043 02e8 D105      		cpc r29,__zero_reg__
 1044 02ea 09F0      		breq .+2
 1045 02ec B0CF      		rjmp .L72
 1046               	.LBE49:
 1048               	.LM95:
 1049 02ee F092 0000 		sts ow_global,r15
 1050 02f2 81E0      		ldi r24,lo8(1)
 1051 02f4 90E0      		ldi r25,hi8(1)
 1052 02f6 02C0      		rjmp .L71
 1053               	.L68:
 1055               	.LM96:
 1056 02f8 80E0      		ldi r24,lo8(0)
 1057 02fa 90E0      		ldi r25,hi8(0)
 1058               	.L71:
 1059               	/* epilogue: frame size=0 */
 1060 02fc DF91      		pop r29
 1061 02fe CF91      		pop r28
 1062 0300 1F91      		pop r17
 1063 0302 0F91      		pop r16
 1064 0304 FF90      		pop r15
 1065 0306 0895      		ret
 1066               	/* epilogue end (size=6) */
 1067               	/* function ow_search_rom size 133 (122) */
 1081               	.Lscope12:
 1083               		.stabd	78,0,0
 1085               	.global	ow_read_byte
 1087               	ow_read_byte:
 1088               		.stabd	46,0,0
 1090               	.LM97:
 1091               	/* prologue: frame size=0 */
 1092 0308 1F93      		push r17
 1093 030a CF93      		push r28
 1094 030c DF93      		push r29
 1095               	/* prologue end (size=3) */
 1096 030e 10E0      		ldi r17,lo8(0)
 1097 0310 C0E0      		ldi r28,lo8(0)
 1098 0312 D0E0      		ldi r29,hi8(0)
 1099               	.L89:
 1100               	.LBB53:
 1102               	.LM98:
 1103 0314 0E94 0000 		call ow_read
 1104 0318 9927      		clr r25
 1105 031a 0C2E      		mov r0,r28
 1106 031c 02C0      		rjmp 2f
 1107 031e 880F      	1:	lsl r24
 1108 0320 991F      		rol r25
 1109 0322 0A94      	2:	dec r0
 1110 0324 E2F7      		brpl 1b
 1111 0326 182B      		or r17,r24
 1112 0328 2196      		adiw r28,1
 1114               	.LM99:
 1115 032a C830      		cpi r28,8
 1116 032c D105      		cpc r29,__zero_reg__
 1117 032e 91F7      		brne .L89
 1118               	.LBE53:
 1120               	.LM100:
 1121 0330 812F      		mov r24,r17
 1122 0332 9927      		clr r25
 1123               	/* epilogue: frame size=0 */
 1124 0334 DF91      		pop r29
 1125 0336 CF91      		pop r28
 1126 0338 1F91      		pop r17
 1127 033a 0895      		ret
 1128               	/* epilogue end (size=4) */
 1129               	/* function ow_read_byte size 26 (19) */
 1134               	.Lscope13:
 1136               		.stabd	78,0,0
 1139               	.global	ow_read_rom
 1141               	ow_read_rom:
 1142               		.stabd	46,0,0
 1144               	.LM101:
 1145               	/* prologue: frame size=0 */
 1146 033c EF92      		push r14
 1147 033e FF92      		push r15
 1148 0340 0F93      		push r16
 1149 0342 1F93      		push r17
 1150 0344 CF93      		push r28
 1151 0346 DF93      		push r29
 1152               	/* prologue end (size=6) */
 1153 0348 7C01      		movw r14,r24
 1155               	.LM102:
 1156 034a 0E94 0000 		call reset_onewire
 1157 034e 8823      		tst r24
 1158 0350 19F4      		brne .L95
 1160               	.LM103:
 1161 0352 8FEF      		ldi r24,lo8(-1)
 1162 0354 9FEF      		ldi r25,hi8(-1)
 1163 0356 1AC0      		rjmp .L97
 1164               	.L95:
 1166               	.LM104:
 1167 0358 83E3      		ldi r24,lo8(51)
 1168 035a 0E94 0000 		call ow_write_byte
 1169 035e E701      		movw r28,r14
 1170 0360 8701      		movw r16,r14
 1171 0362 085F      		subi r16,lo8(-(8))
 1172 0364 1F4F      		sbci r17,hi8(-(8))
 1173               	.L98:
 1174               	.LBB55:
 1176               	.LM105:
 1177 0366 0E94 0000 		call ow_read_byte
 1178 036a 8993      		st Y+,r24
 1180               	.LM106:
 1181 036c C017      		cp r28,r16
 1182 036e D107      		cpc r29,r17
 1183 0370 D1F7      		brne .L98
 1184               	.LBE55:
 1186               	.LM107:
 1187 0372 F701      		movw r30,r14
 1188 0374 1781      		ldd r17,Z+7
 1189 0376 67E0      		ldi r22,lo8(7)
 1190 0378 C701      		movw r24,r14
 1191 037a 0E94 0000 		call crc_checksum
 1192 037e 1817      		cp r17,r24
 1193 0380 19F0      		breq .L100
 1194 0382 8EEF      		ldi r24,lo8(-2)
 1195 0384 9FEF      		ldi r25,hi8(-2)
 1196 0386 02C0      		rjmp .L97
 1197               	.L100:
 1198 0388 81E0      		ldi r24,lo8(1)
 1199 038a 90E0      		ldi r25,hi8(1)
 1200               	.L97:
 1201               	/* epilogue: frame size=0 */
 1202 038c DF91      		pop r29
 1203 038e CF91      		pop r28
 1204 0390 1F91      		pop r17
 1205 0392 0F91      		pop r16
 1206 0394 FF90      		pop r15
 1207 0396 EF90      		pop r14
 1208 0398 0895      		ret
 1209               	/* epilogue end (size=7) */
 1210               	/* function ow_read_rom size 47 (34) */
 1212               	.Lscope14:
 1214               		.stabd	78,0,0
 1218               	.global	ow_eeprom_read
 1220               	ow_eeprom_read:
 1221               		.stabd	46,0,0
 478:onewire/onewire.c **** 
 479:onewire/onewire.c **** /*
 480:onewire/onewire.c ****  *
 481:onewire/onewire.c ****  * DS2502 data functions
 482:onewire/onewire.c ****  *
 483:onewire/onewire.c ****  */
 484:onewire/onewire.c **** 
 485:onewire/onewire.c **** int8_t ow_eeprom_read(struct ow_rom_code_t *rom, void *data)
 486:onewire/onewire.c **** /* {{{ */ {
 1223               	.LM108:
 1224               	/* prologue: frame size=0 */
 1225 039a 1F93      		push r17
 1226 039c CF93      		push r28
 1227 039e DF93      		push r29
 1228               	/* prologue end (size=3) */
 1229 03a0 FC01      		movw r30,r24
 1230 03a2 EB01      		movw r28,r22
 487:onewire/onewire.c **** 
 488:onewire/onewire.c ****     int8_t ret;
 489:onewire/onewire.c **** 
 490:onewire/onewire.c ****     if (rom == NULL)
 1232               	.LM109:
 1233 03a4 892B      		or r24,r25
 1234 03a6 19F4      		brne .L106
 491:onewire/onewire.c ****         ret = ow_skip_rom();
 1236               	.LM110:
 1237 03a8 0E94 0000 		call ow_skip_rom
 1238 03ac 07C0      		rjmp .L108
 1239               	.L106:
 492:onewire/onewire.c ****     else {
 493:onewire/onewire.c **** 
 494:onewire/onewire.c ****         /* check for known family code */
 495:onewire/onewire.c ****         if (!(rom->family == OW_FAMILY_DS2502E48))
 1241               	.LM111:
 1242 03ae 8081      		ld r24,Z
 1243 03b0 8938      		cpi r24,lo8(-119)
 1244 03b2 09F0      		breq .+2
 1245 03b4 41C0      		rjmp .L109
 496:onewire/onewire.c ****             return -2;
 497:onewire/onewire.c **** 
 498:onewire/onewire.c ****         ret = ow_match_rom(rom);
 1247               	.LM112:
 1248 03b6 CF01      		movw r24,r30
 1249 03b8 0E94 0000 		call ow_match_rom
 1250               	.L108:
 499:onewire/onewire.c **** 
 500:onewire/onewire.c ****     }
 501:onewire/onewire.c **** 
 502:onewire/onewire.c ****     if (ret < 0)
 1252               	.LM113:
 1253 03bc 87FF      		sbrs r24,7
 1254 03be 04C0      		rjmp .L111
 503:onewire/onewire.c ****         return ret;
 1256               	.LM114:
 1257 03c0 9927      		clr r25
 1258 03c2 87FD      		sbrc r24,7
 1259 03c4 9095      		com r25
 1260 03c6 3AC0      		rjmp .L113
 1261               	.L111:
 504:onewire/onewire.c **** 
 505:onewire/onewire.c ****     /* transmit command byte */
 506:onewire/onewire.c ****     ow_write_byte(OW_FUNC_READ_MEMORY);
 1263               	.LM115:
 1264 03c8 80EF      		ldi r24,lo8(-16)
 1265 03ca 0E94 0000 		call ow_write_byte
 507:onewire/onewire.c **** 
 508:onewire/onewire.c ****     /* transmit address (mac address starts at offset 5 */
 509:onewire/onewire.c ****     ow_write_byte(5);
 1267               	.LM116:
 1268 03ce 85E0      		ldi r24,lo8(5)
 1269 03d0 0E94 0000 		call ow_write_byte
 510:onewire/onewire.c ****     ow_write_byte(0);
 1271               	.LM117:
 1272 03d4 80E0      		ldi r24,lo8(0)
 1273 03d6 0E94 0000 		call ow_write_byte
 511:onewire/onewire.c **** 
 512:onewire/onewire.c ****     /* read back crc sum of the command */
 513:onewire/onewire.c ****     uint8_t crc = ow_read_byte();
 1275               	.LM118:
 1276 03da 0E94 0000 		call ow_read_byte
 1277               	.LBB63:
 1278               	.LBB64:
 1280               	.Ltext19:
   1:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /* Copyright (c) 2002, 2003, 2004  Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    Copyright (c) 2005, Joerg Wunsch
   3:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    All rights reserved.
   4:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
   5:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
   8:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  11:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      distribution.
  15:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  16:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  20:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  32:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /* $Id: crc16.h,v 1.2.2.1 2006/04/19 20:35:54 joerg_wunsch Exp $ */
  33:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  34:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** #ifndef _UTIL_CRC16_H_
  35:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** #define _UTIL_CRC16_H_
  36:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  37:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** #include <stdint.h>
  38:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  39:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /** \defgroup util_crc <util/crc16.h>: CRC Computations
  40:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code#include <util/crc16.h>\endcode
  41:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  42:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     This header file provides a optimized inline functions for calculating
  43:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     cyclic redundancy checks (CRC) using common polynomials.
  44:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  45:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \par References:
  46:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  47:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \par
  48:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  49:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     See the Dallas Semiconductor app note 27 for 8051 assembler example and
  50:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     general CRC optimization suggestions. The table on the last page of the
  51:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     app note is the key to understanding these implementations.
  52:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  53:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \par
  54:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  55:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Jack Crenshaw's "Implementing CRCs" article in the January 1992 isue of \e
  56:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Embedded \e Systems \e Programming. This may be difficult to find, but it
  57:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     explains CRC's in very clear and concise terms. Well worth the effort to
  58:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     obtain a copy.
  59:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  60:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     A typical application would look like:
  61:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  62:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code
  63:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     // Dallas iButton test vector.
  64:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint8_t serno[] = { 0x02, 0x1c, 0xb8, 0x01, 0, 0, 0, 0xa2 };
  65:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  66:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     int
  67:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     checkcrc(void)
  68:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     {
  69:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	uint8_t crc = 0, i;
  70:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  71:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	for (i = 0; i < sizeof serno / sizeof serno[0]; i++)
  72:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	    crc = _crc_ibutton_update(crc, serno[i]);
  73:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  74:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	return crc; // must be 0
  75:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     }
  76:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \endcode
  77:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** */
  78:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  79:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /** \ingroup util_crc
  80:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Optimized CRC-16 calculation.
  81:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  82:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Polynomial: x^16 + x^15 + x^2 + 1 (0xa001)<br>
  83:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Initial value: 0xffff
  84:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  85:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     This CRC is normally used in disk-drive controllers.
  86:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  87:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
  88:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  89:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code
  90:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint16_t
  91:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     crc16_update(uint16_t crc, uint8_t a)
  92:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     {
  93:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	int i;
  94:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  95:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	crc ^= a;
  96:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	for (i = 0; i < 8; ++i)
  97:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	{
  98:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	    if (crc & 1)
  99:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		crc = (crc >> 1) ^ 0xA001;
 100:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	    else
 101:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		crc = (crc >> 1);
 102:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	}
 103:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 104:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	return crc;
 105:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     }
 106:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 107:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \endcode */
 108:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 109:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** static __inline__ uint16_t
 110:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** _crc16_update(uint16_t __crc, uint8_t __data)
 111:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** {
 112:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	uint8_t __tmp;
 113:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	uint16_t __ret;
 114:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 115:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	__asm__ __volatile__ (
 116:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %A0,%2" "\n\t"
 117:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov %1,%A0" "\n\t"
 118:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"swap %1" "\n\t"
 119:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %1,%A0" "\n\t"
 120:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov __tmp_reg__,%1" "\n\t"
 121:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 122:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 123:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %1,__tmp_reg__" "\n\t"
 124:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov __tmp_reg__,%1" "\n\t"
 125:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 126:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %1,__tmp_reg__" "\n\t"
 127:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"andi %1,0x07" "\n\t"
 128:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov __tmp_reg__,%A0" "\n\t"
 129:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov %A0,%B0" "\n\t"
 130:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 131:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"ror __tmp_reg__" "\n\t"
 132:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"ror %1" "\n\t"
 133:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov %B0,__tmp_reg__" "\n\t"
 134:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %A0,%1" "\n\t"
 135:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"lsr __tmp_reg__" "\n\t"
 136:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"ror %1" "\n\t"
 137:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %B0,__tmp_reg__" "\n\t"
 138:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %A0,%1"
 139:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		: "=r" (__ret), "=d" (__tmp)
 140:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		: "r" (__data), "0" (__crc)
 141:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		: "r0"
 142:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	);
 143:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	return __ret;
 144:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** }
 145:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 146:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /** \ingroup util_crc
 147:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Optimized CRC-XMODEM calculation.
 148:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 149:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Polynomial: x^16 + x^12 + x^5 + 1 (0x1021)<br>
 150:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Initial value: 0x0
 151:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 152:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     This is the CRC used by the Xmodem-CRC protocol.
 153:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 154:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
 155:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 156:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code
 157:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint16_t
 158:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     crc_xmodem_update (uint16_t crc, uint8_t data)
 159:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     {
 160:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         int i;
 161:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 162:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         crc = crc ^ ((uint16_t)data << 8);
 163:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         for (i=0; i<8; i++)
 164:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         {
 165:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****             if (crc & 0x8000)
 166:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****                 crc = (crc << 1) ^ 0x1021;
 167:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****             else
 168:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****                 crc <<= 1;
 169:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         }
 170:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 171:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         return crc;
 172:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     }
 173:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \endcode */
 174:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 175:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** static __inline__ uint16_t
 176:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** _crc_xmodem_update(uint16_t __crc, uint8_t __data)
 177:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** {
 178:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint16_t __ret;             /* %B0:%A0 (alias for __crc) */
 179:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint8_t __tmp1;             /* %1 */
 180:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint8_t __tmp2;             /* %2 */
 181:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****                                 /* %3  __data */
 182:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 183:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     __asm__ __volatile__ (
 184:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %B0,%3"          "\n\t" /* crc.hi ^ data */
 185:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    __tmp_reg__,%B0" "\n\t"
 186:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "swap   __tmp_reg__"     "\n\t" /* swap(crc.hi ^ data) */
 187:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 188:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         /* Calculate the ret.lo of the CRC. */
 189:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    %1,__tmp_reg__"  "\n\t"
 190:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %1,0x0f"         "\n\t"
 191:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %1,%B0"          "\n\t"
 192:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    %2,%B0"          "\n\t"
 193:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %2,__tmp_reg__"  "\n\t"
 194:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsl    %2"              "\n\t"
 195:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %2,0xe0"         "\n\t"
 196:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %1,%2"           "\n\t" /* __tmp1 is now ret.lo. */
 197:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 198:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         /* Calculate the ret.hi of the CRC. */
 199:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    %2,__tmp_reg__"  "\n\t"
 200:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %2,%B0"          "\n\t"
 201:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %2,0xf0"         "\n\t"
 202:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsr    %2"              "\n\t"
 203:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    __tmp_reg__,%B0" "\n\t"
 204:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsl    __tmp_reg__"     "\n\t"
 205:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "rol    %2"              "\n\t"
 206:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsr    %B0"             "\n\t"
 207:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsr    %B0"             "\n\t"
 208:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsr    %B0"             "\n\t"
 209:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %B0,0x1f"        "\n\t"
 210:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %B0,%2"          "\n\t"
 211:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %B0,%A0"         "\n\t" /* ret.hi is now ready. */
 212:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    %A0,%1"          "\n\t" /* ret.lo is now ready. */
 213:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "=d" (__ret), "=d" (__tmp1), "=d" (__tmp2)
 214:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "r" (__data), "0" (__crc)
 215:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "r0"
 216:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     );
 217:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     return __ret;
 218:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** }
 219:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 220:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /** \ingroup util_crc
 221:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Optimized CRC-CCITT calculation.
 222:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 223:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Polynomial: x^16 + x^12 + x^5 + 1 (0x8408)<br>
 224:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Initial value: 0xffff
 225:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 226:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     This is the CRC used by PPP and IrDA.
 227:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 228:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     See RFC1171 (PPP protocol) and IrDA IrLAP 1.1
 229:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 230:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \note Although the CCITT polynomial is the same as that used by the Xmodem
 231:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     protocol, they are quite different. The difference is in how the bits are
 232:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     shifted through the alorgithm. Xmodem shifts the MSB of the CRC and the
 233:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     input first, while CCITT shifts the LSB of the CRC and the input first.
 234:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 235:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
 236:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 237:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code
 238:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint16_t
 239:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     crc_ccitt_update (uint16_t crc, uint8_t data)
 240:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     {
 241:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         data ^= lo8 (crc);
 242:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         data ^= data << 4;
 243:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 244:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         return ((((uint16_t)data << 8) | hi8 (crc)) ^ (uint8_t)(data >> 4) 
 245:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****                 ^ ((uint16_t)data << 3));
 246:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     }
 247:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \endcode */
 248:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 249:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** static __inline__ uint16_t
 250:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** _crc_ccitt_update (uint16_t __crc, uint8_t __data)
 251:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** {
 252:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint16_t __ret;
 253:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 254:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     __asm__ __volatile__ (
 255:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %A0,%1"          "\n\t"
 256:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 257:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    __tmp_reg__,%A0" "\n\t"
 258:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "swap   %A0"             "\n\t"
 259:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %A0,0xf0"        "\n\t"
 260:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %A0,__tmp_reg__" "\n\t"
 261:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 262:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    __tmp_reg__,%B0" "\n\t"
 263:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 264:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    %B0,%A0"         "\n\t"
 265:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 266:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "swap   %A0"             "\n\t"
 267:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %A0,0x0f"        "\n\t"
 268:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    __tmp_reg__,%A0" "\n\t"
 269:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 270:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsr    %A0"             "\n\t"
 271:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %B0,%A0"         "\n\t"
 272:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 273:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %A0,%B0"         "\n\t"
 274:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsl    %A0"             "\n\t"
 275:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsl    %A0"             "\n\t"
 276:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsl    %A0"             "\n\t"
 277:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %A0,__tmp_reg__"
 278:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 279:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "=d" (__ret)
 280:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "r" (__data), "0" (__crc)
 281:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "r0"
 282:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     );
 283:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     return __ret;
 284:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** }
 285:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 286:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /** \ingroup util_crc
 287:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Optimized Dallas (now Maxim) iButton 8-bit CRC calculation.
 288:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 289:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Polynomial: x^8 + x^5 + x^4 + 1 (0x8C)<br>
 290:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Initial value: 0x0
 291:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 292:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     See http://www.maxim-ic.com/appnotes.cfm/appnote_number/27
 293:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 294:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
 295:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 296:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code
 297:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint8_t
 298:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     _crc_ibutton_update(uint8_t crc, uint8_t data)
 299:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     {
 300:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	uint8_t i;
 301:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 302:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	crc = crc ^ data;
 303:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	for (i = 0; i < 8; i++)
 304:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	{
 305:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	    if (crc & 0x01)
 306:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	        crc = (crc >> 1) ^ 0x8C;
 307:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	    else
 308:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	        crc >>= 1;
 309:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	}
 310:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 311:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	return crc;
 312:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     }
 313:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \endcode
 314:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** */
 315:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 316:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** static __inline__ uint8_t
 317:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** _crc_ibutton_update(uint8_t __crc, uint8_t __data)
 318:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** {
 319:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	uint8_t __i, __pattern;
 320:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	__asm__ __volatile__ (
 1282               	.LM119:
 1283 03de 30E0      		ldi r19,lo8(0)
 1284 03e0 90EF      		ldi r25,lo8(-16)
 1285 03e2 532F      		mov r21,r19
 1286               	/* #APP */
 1287 03e4 5927      			eor	r21, r25
 1288 03e6 48E0      			ldi	r20, 8
 1289 03e8 2CE8      			ldi	r18, 0x8C
 1290 03ea 50FB      		1:	bst	r21, 0
 1291 03ec 5695      			lsr	r21
 1292 03ee 0EF4      			brtc	2f
 1293 03f0 5227      			eor	r21, r18
 1294 03f2 4A95      		2:	dec	r20
 1295 03f4 D1F7      			brne	1b
 1296               		
 1297               	/* #NOAPP */
 1298 03f6 952F      		mov r25,r21
 1299               	.LBE64:
 1300               	.LBE63:
 1301               	.LBB65:
 1302               	.LBB66:
 1303 03f8 25E0      		ldi r18,lo8(5)
 1304               	/* #APP */
 1305 03fa 9227      			eor	r25, r18
 1306 03fc 48E0      			ldi	r20, 8
 1307 03fe 2CE8      			ldi	r18, 0x8C
 1308 0400 90FB      		1:	bst	r25, 0
 1309 0402 9695      			lsr	r25
 1310 0404 0EF4      			brtc	2f
 1311 0406 9227      			eor	r25, r18
 1312 0408 4A95      		2:	dec	r20
 1313 040a D1F7      			brne	1b
 1314               		
 1315               	/* #NOAPP */
 1316               	.LBE66:
 1317               	.LBE65:
 1318               	.LBB67:
 1319               	.LBB68:
 1320               	/* #APP */
 1321 040c 9327      			eor	r25, r19
 1322 040e 38E0      			ldi	r19, 8
 1323 0410 2CE8      			ldi	r18, 0x8C
 1324 0412 90FB      		1:	bst	r25, 0
 1325 0414 9695      			lsr	r25
 1326 0416 0EF4      			brtc	2f
 1327 0418 9227      			eor	r25, r18
 1328 041a 3A95      		2:	dec	r19
 1329 041c D1F7      			brne	1b
 1330               		
 1331               	/* #NOAPP */
 1332               	.LBE68:
 1333               	.LBE67:
 1335               	.Ltext20:
 514:onewire/onewire.c **** 
 515:onewire/onewire.c ****     /* check crc */
 516:onewire/onewire.c ****     uint8_t crc2 = 0;
 517:onewire/onewire.c ****     crc2 = _crc_ibutton_update(crc2, OW_FUNC_READ_MEMORY);
 518:onewire/onewire.c ****     crc2 = _crc_ibutton_update(crc2, 5);
 519:onewire/onewire.c ****     crc2 = _crc_ibutton_update(crc2, 0);
 520:onewire/onewire.c **** 
 521:onewire/onewire.c ****     if (crc != crc2)
 1337               	.LM120:
 1338 041e 8917      		cp r24,r25
 1339 0420 59F4      		brne .L109
 1340 0422 10E0      		ldi r17,lo8(0)
 1341               	.L115:
 1342               	.LBB69:
 522:onewire/onewire.c ****         return -2;
 523:onewire/onewire.c **** 
 524:onewire/onewire.c ****     uint8_t *p = (uint8_t *)data+5;
 525:onewire/onewire.c **** 
 526:onewire/onewire.c ****     /* read 6 byte of data */
 527:onewire/onewire.c ****     for (uint8_t i = 0; i < 6; i++)
 528:onewire/onewire.c ****         *p-- = ow_read_byte();
 1344               	.LM121:
 1345 0424 0E94 0000 		call ow_read_byte
 1346 0428 8D83      		std Y+5,r24
 1348               	.LM122:
 1349 042a 1F5F      		subi r17,lo8(-(1))
 1350 042c 2197      		sbiw r28,1
 1351 042e 1630      		cpi r17,lo8(6)
 1352 0430 C9F7      		brne .L115
 1353 0432 80E0      		ldi r24,lo8(0)
 1354 0434 90E0      		ldi r25,hi8(0)
 1355 0436 02C0      		rjmp .L113
 1356               	.L109:
 1357 0438 8EEF      		ldi r24,lo8(-2)
 1358 043a 9FEF      		ldi r25,hi8(-2)
 1359               	.L113:
 1360               	.LBE69:
 1361               	/* epilogue: frame size=0 */
 1362 043c DF91      		pop r29
 1363 043e CF91      		pop r28
 1364 0440 1F91      		pop r17
 1365 0442 0895      		ret
 1366               	/* epilogue end (size=4) */
 1367               	/* function ow_eeprom_read size 118 (111) */
 1397               	.Lscope15:
 1399               		.stabd	78,0,0
 1402               	.global	ow_temp_power
 1404               	ow_temp_power:
 1405               		.stabd	46,0,0
 1407               	.LM123:
 1408               	/* prologue: frame size=0 */
 1409               	/* prologue end (size=0) */
 1410 0444 FC01      		movw r30,r24
 1412               	.LM124:
 1413 0446 892B      		or r24,r25
 1414 0448 19F4      		brne .L121
 1416               	.LM125:
 1417 044a 0E94 0000 		call ow_skip_rom
 1418 044e 0BC0      		rjmp .L123
 1419               	.L121:
 1420               	.LBB72:
 1421               	.LBB73:
 1423               	.LM126:
 1424 0450 8081      		ld r24,Z
 1425 0452 8031      		cpi r24,lo8(16)
 1426 0454 29F0      		breq .L124
 1427 0456 8232      		cpi r24,lo8(34)
 1428 0458 19F0      		breq .L124
 1429 045a 8EEF      		ldi r24,lo8(-2)
 1430 045c 9FEF      		ldi r25,hi8(-2)
 1431 045e 0895      		ret
 1432               	.L124:
 1433               	.LBE73:
 1434               	.LBE72:
 1436               	.LM127:
 1437 0460 CF01      		movw r24,r30
 1438 0462 0E94 0000 		call ow_match_rom
 1439               	.L123:
 1441               	.LM128:
 1442 0466 87FF      		sbrs r24,7
 1443 0468 04C0      		rjmp .L128
 1445               	.LM129:
 1446 046a 9927      		clr r25
 1447 046c 87FD      		sbrc r24,7
 1448 046e 9095      		com r25
 1449 0470 0895      		ret
 1450               	.L128:
 1452               	.LM130:
 1453 0472 84EB      		ldi r24,lo8(-76)
 1454 0474 0E94 0000 		call ow_write_byte
 1456               	.LM131:
 1457 0478 0E94 0000 		call ow_read
 1458 047c 9927      		clr r25
 1459 047e 87FD      		sbrc r24,7
 1460 0480 9095      		com r25
 1462               	.LM132:
 1463 0482 0895      		ret
 1464               	/* epilogue: frame size=0 */
 1465               	/* epilogue: noreturn */
 1466               	/* epilogue end (size=0) */
 1467               	/* function ow_temp_power size 32 (32) */
 1472               	.Lscope16:
 1474               		.stabd	78,0,0
 1478               	.global	ow_temp_read_scratchpad
 1480               	ow_temp_read_scratchpad:
 1481               		.stabd	46,0,0
 1483               	.LM133:
 1484               	/* prologue: frame size=0 */
 1485 0484 EF92      		push r14
 1486 0486 FF92      		push r15
 1487 0488 0F93      		push r16
 1488 048a 1F93      		push r17
 1489 048c CF93      		push r28
 1490 048e DF93      		push r29
 1491               	/* prologue end (size=6) */
 1492 0490 FC01      		movw r30,r24
 1493 0492 7B01      		movw r14,r22
 1495               	.LM134:
 1496 0494 892B      		or r24,r25
 1497 0496 19F4      		brne .L132
 1499               	.LM135:
 1500 0498 0E94 0000 		call ow_skip_rom
 1501 049c 0BC0      		rjmp .L134
 1502               	.L132:
 1503               	.LBB77:
 1504               	.LBB78:
 1506               	.LM136:
 1507 049e 8081      		ld r24,Z
 1508 04a0 8031      		cpi r24,lo8(16)
 1509 04a2 29F0      		breq .L135
 1510 04a4 8232      		cpi r24,lo8(34)
 1511 04a6 19F0      		breq .L135
 1512 04a8 8DEF      		ldi r24,lo8(-3)
 1513 04aa 9FEF      		ldi r25,hi8(-3)
 1514 04ac 23C0      		rjmp .L138
 1515               	.L135:
 1516               	.LBE78:
 1517               	.LBE77:
 1519               	.LM137:
 1520 04ae CF01      		movw r24,r30
 1521 04b0 0E94 0000 		call ow_match_rom
 1522               	.L134:
 1524               	.LM138:
 1525 04b4 87FF      		sbrs r24,7
 1526 04b6 04C0      		rjmp .L139
 1528               	.LM139:
 1529 04b8 9927      		clr r25
 1530 04ba 87FD      		sbrc r24,7
 1531 04bc 9095      		com r25
 1532 04be 1AC0      		rjmp .L138
 1533               	.L139:
 1535               	.LM140:
 1536 04c0 8EEB      		ldi r24,lo8(-66)
 1537 04c2 0E94 0000 		call ow_write_byte
 1538 04c6 E701      		movw r28,r14
 1539 04c8 8701      		movw r16,r14
 1540 04ca 075F      		subi r16,lo8(-(9))
 1541 04cc 1F4F      		sbci r17,hi8(-(9))
 1542               	.L141:
 1543               	.LBB79:
 1545               	.LM141:
 1546 04ce 0E94 0000 		call ow_read_byte
 1547 04d2 8993      		st Y+,r24
 1549               	.LM142:
 1550 04d4 C017      		cp r28,r16
 1551 04d6 D107      		cpc r29,r17
 1552 04d8 D1F7      		brne .L141
 1553               	.LBE79:
 1555               	.LM143:
 1556 04da F701      		movw r30,r14
 1557 04dc 1085      		ldd r17,Z+8
 1558 04de 68E0      		ldi r22,lo8(8)
 1559 04e0 C701      		movw r24,r14
 1560 04e2 0E94 0000 		call crc_checksum
 1561 04e6 1817      		cp r17,r24
 1562 04e8 19F0      		breq .L143
 1563 04ea 8EEF      		ldi r24,lo8(-2)
 1564 04ec 9FEF      		ldi r25,hi8(-2)
 1565 04ee 02C0      		rjmp .L138
 1566               	.L143:
 1567 04f0 81E0      		ldi r24,lo8(1)
 1568 04f2 90E0      		ldi r25,hi8(1)
 1569               	.L138:
 1570               	/* epilogue: frame size=0 */
 1571 04f4 DF91      		pop r29
 1572 04f6 CF91      		pop r28
 1573 04f8 1F91      		pop r17
 1574 04fa 0F91      		pop r16
 1575 04fc FF90      		pop r15
 1576 04fe EF90      		pop r14
 1577 0500 0895      		ret
 1578               	/* epilogue end (size=7) */
 1579               	/* function ow_temp_read_scratchpad size 63 (50) */
 1584               	.Lscope17:
 1586               		.stabd	78,0,0
 1590               	.global	ow_temp_start_convert
 1592               	ow_temp_start_convert:
 1593               		.stabd	46,0,0
 1595               	.LM144:
 1596               	/* prologue: frame size=0 */
 1597 0502 1F93      		push r17
 1598               	/* prologue end (size=1) */
 1599 0504 FC01      		movw r30,r24
 1600 0506 162F      		mov r17,r22
 1602               	.LM145:
 1603 0508 892B      		or r24,r25
 1604 050a 19F4      		brne .L149
 1606               	.LM146:
 1607 050c 0E94 0000 		call ow_skip_rom
 1608 0510 0BC0      		rjmp .L151
 1609               	.L149:
 1610               	.LBB82:
 1611               	.LBB83:
 1613               	.LM147:
 1614 0512 8081      		ld r24,Z
 1615 0514 8031      		cpi r24,lo8(16)
 1616 0516 29F0      		breq .L152
 1617 0518 8232      		cpi r24,lo8(34)
 1618 051a 19F0      		breq .L152
 1619 051c 8EEF      		ldi r24,lo8(-2)
 1620 051e 9FEF      		ldi r25,hi8(-2)
 1621 0520 19C0      		rjmp .L155
 1622               	.L152:
 1623               	.LBE83:
 1624               	.LBE82:
 1626               	.LM148:
 1627 0522 CF01      		movw r24,r30
 1628 0524 0E94 0000 		call ow_match_rom
 1629               	.L151:
 1631               	.LM149:
 1632 0528 87FF      		sbrs r24,7
 1633 052a 04C0      		rjmp .L156
 1635               	.LM150:
 1636 052c 9927      		clr r25
 1637 052e 87FD      		sbrc r24,7
 1638 0530 9095      		com r25
 1639 0532 10C0      		rjmp .L155
 1640               	.L156:
 1642               	.LM151:
 1643 0534 84E4      		ldi r24,lo8(68)
 1644 0536 0E94 0000 		call ow_write_byte
 1646               	.LM152:
 1647 053a 569A      		sbi 42-0x20,6
 1649               	.LM153:
 1650 053c 5E9A      		sbi 43-0x20,6
 1652               	.LM154:
 1653 053e 1123      		tst r17
 1654 0540 19F4      		brne .L162
 1655 0542 80E0      		ldi r24,lo8(0)
 1656 0544 90E0      		ldi r25,hi8(0)
 1657 0546 06C0      		rjmp .L155
 1658               	.L162:
 1660               	.LM155:
 1661 0548 0E94 0000 		call ow_read
 1662 054c 8823      		tst r24
 1663 054e E1F3      		breq .L162
 1664 0550 81E0      		ldi r24,lo8(1)
 1665 0552 90E0      		ldi r25,hi8(1)
 1666               	.L155:
 1667               	/* epilogue: frame size=0 */
 1668 0554 1F91      		pop r17
 1669 0556 0895      		ret
 1670               	/* epilogue end (size=2) */
 1671               	/* function ow_temp_start_convert size 43 (40) */
 1676               	.Lscope18:
 1678               		.stabd	78,0,0
 1679               		.comm ow_global,10,1
 1682               	.Letext0:
 1683               	/* File "onewire/onewire.c": code  740 = 0x02e4 ( 665), prologues  32, epilogues  43 */
DEFINED SYMBOLS
                            *ABS*:00000000 onewire.c
     /tmp/cclOVWS3.s:3      *ABS*:0000003f __SREG__
     /tmp/cclOVWS3.s:4      *ABS*:0000003e __SP_H__
     /tmp/cclOVWS3.s:5      *ABS*:0000003d __SP_L__
     /tmp/cclOVWS3.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cclOVWS3.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cclOVWS3.s:149    .text:00000000 init_onewire
     /tmp/cclOVWS3.s:176    .text:00000008 ow_set_address_bit
     /tmp/cclOVWS3.s:244    .text:00000052 ow_temp_sensor
     /tmp/cclOVWS3.s:285    .text:0000006e ow_temp_normalize
     /tmp/cclOVWS3.s:340    .text:000000a2 reset_onewire
     /tmp/cclOVWS3.s:454    .text:000000e2 ow_write_0
     /tmp/cclOVWS3.s:496    .text:000000f0 ow_write_1
     /tmp/cclOVWS3.s:556    .text:00000106 ow_write
     /tmp/cclOVWS3.s:589    .text:00000116 ow_write_byte
     /tmp/cclOVWS3.s:640    .text:0000014a ow_match_rom
     /tmp/cclOVWS3.s:733    .text:000001b6 ow_skip_rom
     /tmp/cclOVWS3.s:770    .text:000001d0 ow_read
     /tmp/cclOVWS3.s:873    .text:00000202 ow_search_rom
                            *COM*:0000000a ow_global
     /tmp/cclOVWS3.s:1087   .text:00000308 ow_read_byte
     /tmp/cclOVWS3.s:1141   .text:0000033c ow_read_rom
     /tmp/cclOVWS3.s:1220   .text:0000039a ow_eeprom_read
     /tmp/cclOVWS3.s:1404   .text:00000444 ow_temp_power
     /tmp/cclOVWS3.s:1480   .text:00000484 ow_temp_read_scratchpad
     /tmp/cclOVWS3.s:1592   .text:00000502 ow_temp_start_convert

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
crc_checksum
