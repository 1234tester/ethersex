   1               		.file	"onewire.c"
   2               		.arch atmega644
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
 141               	.global	init_onewire
 143               	init_onewire:
 144               		.stabd	46,0,0
   1:onewire/onewire.c **** /* vim:fdm=marker ts=4 et ai
   2:onewire/onewire.c ****  * {{{
   3:onewire/onewire.c ****  *         simple onewire library implementation
   4:onewire/onewire.c ****  *
   5:onewire/onewire.c ****  *    for additional information please
   6:onewire/onewire.c ****  *    see http://koeln.ccc.de/prozesse/running/fnordlicht
   7:onewire/onewire.c ****  *
   8:onewire/onewire.c ****  * (c) by Alexander Neumann <alexander@bumpern.de>
   9:onewire/onewire.c ****  *
  10:onewire/onewire.c ****  * This program is free software; you can redistribute it and/or modify
  11:onewire/onewire.c ****  * it under the terms of the GNU General Public License version 2 as
  12:onewire/onewire.c ****  * published by the Free Software Foundation.
  13:onewire/onewire.c ****  *
  14:onewire/onewire.c ****  * This program is distributed in the hope that it will be useful,
  15:onewire/onewire.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:onewire/onewire.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:onewire/onewire.c ****  * GNU General Public License for more details.
  18:onewire/onewire.c ****  *
  19:onewire/onewire.c ****  * You should have received a copy of the GNU General Public License
  20:onewire/onewire.c ****  * along with this program; if not, write to the Free Software
  21:onewire/onewire.c ****  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
  22:onewire/onewire.c ****  *
  23:onewire/onewire.c ****  * For more information on the GPL, please go to:
  24:onewire/onewire.c ****  * http://www.gnu.org/copyleft/gpl.html
  25:onewire/onewire.c ****  }}} */
  26:onewire/onewire.c **** 
  27:onewire/onewire.c **** #include <avr/io.h>
  28:onewire/onewire.c **** #include <util/delay.h>
  29:onewire/onewire.c **** #include <util/crc16.h>
  30:onewire/onewire.c **** 
  31:onewire/onewire.c **** #include "../config.h"
  32:onewire/onewire.c **** #include "crc.h"
  33:onewire/onewire.c **** #include "onewire.h"
  34:onewire/onewire.c **** 
  35:onewire/onewire.c **** #if !defined(ONEWIRE_PINNUM) || !defined(ONEWIRE_PIN) || !defined(ONEWIRE_PORT) || !defined(ONEWIRE
  36:onewire/onewire.c **** #error ONEWIRE_PINNUM, ONEWIRE_PIN, ONEWIRE_DDR or ONEWIRE_PORT undefined!
  37:onewire/onewire.c **** #endif
  38:onewire/onewire.c **** 
  39:onewire/onewire.c **** #ifdef ONEWIRE_SUPPORT
  40:onewire/onewire.c **** 
  41:onewire/onewire.c **** #ifdef DEBUG
  42:onewire/onewire.c **** #include "../uart.h"
  43:onewire/onewire.c **** #endif
  44:onewire/onewire.c **** 
  45:onewire/onewire.c **** /* global variables */
  46:onewire/onewire.c **** struct ow_global_t ow_global;
  47:onewire/onewire.c **** 
  48:onewire/onewire.c **** /* module local prototypes */
  49:onewire/onewire.c **** void noinline ow_set_address_bit(struct ow_rom_code_t *rom, uint8_t idx, uint8_t val);
  50:onewire/onewire.c **** uint8_t ow_read_byte(void);
  51:onewire/onewire.c **** 
  52:onewire/onewire.c **** void init_onewire(void)
  53:onewire/onewire.c **** /* {{{ */ {
 146               	.LM0:
 147               	/* prologue: frame size=0 */
 148               	/* prologue end (size=0) */
  54:onewire/onewire.c **** 
  55:onewire/onewire.c ****     /* configure onewire pin as input */
  56:onewire/onewire.c ****     OW_CONFIG_INPUT();
 150               	.LM1:
 151 0000 5E9A      		sbi 43-0x20,6
 152 0002 5698      		cbi 42-0x20,6
  57:onewire/onewire.c **** 
  58:onewire/onewire.c ****     /* enable pullup */
  59:onewire/onewire.c ****     OW_PULLUP();
 154               	.LM2:
 155 0004 5E9A      		sbi 43-0x20,6
 156               	/* epilogue: frame size=0 */
 157 0006 0895      		ret
 158               	/* epilogue end (size=1) */
 159               	/* function init_onewire size 4 (3) */
 161               	.Lscope0:
 163               		.stabd	78,0,0
 168               	.global	ow_set_address_bit
 170               	ow_set_address_bit:
 171               		.stabd	46,0,0
  60:onewire/onewire.c **** 
  61:onewire/onewire.c **** } /* }}} */
  62:onewire/onewire.c **** 
  63:onewire/onewire.c **** /* low-level functions */
  64:onewire/onewire.c **** 
  65:onewire/onewire.c **** uint8_t noinline reset_onewire(void)
  66:onewire/onewire.c **** /* {{{ */ {
  67:onewire/onewire.c **** 
  68:onewire/onewire.c ****     /* pull bus low */
  69:onewire/onewire.c ****     OW_CONFIG_OUTPUT();
  70:onewire/onewire.c ****     OW_LOW();
  71:onewire/onewire.c **** 
  72:onewire/onewire.c ****     /* wait 480us */
  73:onewire/onewire.c ****     _delay_loop_2(OW_RESET_TIMEOUT_1);
  74:onewire/onewire.c **** 
  75:onewire/onewire.c ****     /* release bus */
  76:onewire/onewire.c ****     OW_HIGH();
  77:onewire/onewire.c ****     OW_CONFIG_INPUT();
  78:onewire/onewire.c **** 
  79:onewire/onewire.c ****     /* wait 60us (maximal pause) + 30 us (half minimum pulse) */
  80:onewire/onewire.c ****     _delay_loop_2(OW_RESET_TIMEOUT_2);
  81:onewire/onewire.c **** 
  82:onewire/onewire.c ****     /* sample data */
  83:onewire/onewire.c ****     uint8_t data1 = OW_GET_INPUT();
  84:onewire/onewire.c **** 
  85:onewire/onewire.c ****     /* wait 390us */
  86:onewire/onewire.c ****     _delay_loop_2(OW_RESET_TIMEOUT_3);
  87:onewire/onewire.c **** 
  88:onewire/onewire.c ****     /* sample data again */
  89:onewire/onewire.c ****     uint8_t data2 = OW_GET_INPUT();
  90:onewire/onewire.c **** 
  91:onewire/onewire.c ****     /* if first sample is low and second sample is high, at least one device is
  92:onewire/onewire.c ****      * attached to this bus */
  93:onewire/onewire.c ****     return !data1 && data2;
  94:onewire/onewire.c **** 
  95:onewire/onewire.c **** } /* }}} */
  96:onewire/onewire.c **** 
  97:onewire/onewire.c **** void noinline ow_write_0(void)
  98:onewire/onewire.c **** /* {{{ */ {
  99:onewire/onewire.c **** 
 100:onewire/onewire.c ****     /* a write 0 timeslot is initiated by holding the data line low for
 101:onewire/onewire.c ****      * approximately 80us */
 102:onewire/onewire.c **** 
 103:onewire/onewire.c ****     OW_LOW();
 104:onewire/onewire.c ****     _delay_loop_2(OW_WRITE_0_TIMEOUT);
 105:onewire/onewire.c ****     OW_HIGH();
 106:onewire/onewire.c **** 
 107:onewire/onewire.c **** } /* }}} */
 108:onewire/onewire.c **** 
 109:onewire/onewire.c **** void noinline ow_write_1(void)
 110:onewire/onewire.c **** /* {{{ */ {
 111:onewire/onewire.c **** 
 112:onewire/onewire.c ****     /* a write 1 timeslot is initiated by holding the data line low for
 113:onewire/onewire.c ****      * approximately 4us, then restore the idle state and wait at least 80us */
 114:onewire/onewire.c **** 
 115:onewire/onewire.c ****     OW_LOW();
 116:onewire/onewire.c ****     _delay_loop_2(OW_WRITE_1_TIMEOUT_1);
 117:onewire/onewire.c ****     OW_HIGH();
 118:onewire/onewire.c ****     _delay_loop_2(OW_WRITE_1_TIMEOUT_2);
 119:onewire/onewire.c **** 
 120:onewire/onewire.c **** } /* }}} */
 121:onewire/onewire.c **** 
 122:onewire/onewire.c **** void noinline ow_write(uint8_t value)
 123:onewire/onewire.c **** /* {{{ */ {
 124:onewire/onewire.c **** 
 125:onewire/onewire.c ****     if (value > 0)
 126:onewire/onewire.c ****         ow_write_1();
 127:onewire/onewire.c ****     else
 128:onewire/onewire.c ****         ow_write_0();
 129:onewire/onewire.c **** 
 130:onewire/onewire.c **** } /* }}} */
 131:onewire/onewire.c **** 
 132:onewire/onewire.c **** void noinline ow_write_byte(uint8_t value)
 133:onewire/onewire.c **** /* {{{ */ {
 134:onewire/onewire.c **** 
 135:onewire/onewire.c ****     OW_CONFIG_OUTPUT();
 136:onewire/onewire.c ****     for (uint8_t i = 0; i < 8; i++) {
 137:onewire/onewire.c **** 
 138:onewire/onewire.c ****         ow_write(value & _BV(i));
 139:onewire/onewire.c ****     }
 140:onewire/onewire.c **** 
 141:onewire/onewire.c **** } /* }}} */
 142:onewire/onewire.c **** 
 143:onewire/onewire.c **** /* FIXME: (optimization) combine ow_write_1() and ow_read(), as they are very similar */
 144:onewire/onewire.c **** uint8_t noinline ow_read(void)
 145:onewire/onewire.c **** /* {{{ */ {
 146:onewire/onewire.c **** 
 147:onewire/onewire.c ****     /* a read timeslot is sent by holding the data line low for
 148:onewire/onewire.c ****      * 1us, then wait approximately 14us, then sample data and
 149:onewire/onewire.c ****      * wait  */
 150:onewire/onewire.c **** 
 151:onewire/onewire.c ****     OW_CONFIG_OUTPUT();
 152:onewire/onewire.c ****     OW_LOW();
 153:onewire/onewire.c **** 
 154:onewire/onewire.c ****     _delay_loop_2(OW_READ_TIMEOUT_1);
 155:onewire/onewire.c **** 
 156:onewire/onewire.c ****     OW_HIGH();
 157:onewire/onewire.c ****     OW_CONFIG_INPUT();
 158:onewire/onewire.c **** 
 159:onewire/onewire.c ****     _delay_loop_2(OW_READ_TIMEOUT_2);
 160:onewire/onewire.c **** 
 161:onewire/onewire.c ****     /* sample data now */
 162:onewire/onewire.c ****     uint8_t data = OW_GET_INPUT();
 163:onewire/onewire.c **** 
 164:onewire/onewire.c ****     /* wait for remaining slot time */
 165:onewire/onewire.c ****     _delay_loop_2(OW_READ_TIMEOUT_3);
 166:onewire/onewire.c **** 
 167:onewire/onewire.c ****     return data;
 168:onewire/onewire.c **** 
 169:onewire/onewire.c **** } /* }}} */
 170:onewire/onewire.c **** 
 171:onewire/onewire.c **** uint8_t noinline ow_read_byte(void)
 172:onewire/onewire.c **** /* {{{ */ {
 173:onewire/onewire.c **** 
 174:onewire/onewire.c ****     uint8_t data = 0;
 175:onewire/onewire.c **** 
 176:onewire/onewire.c ****     for (uint8_t i = 0; i < 8; i++) {
 177:onewire/onewire.c ****         data |= (ow_read() << i);
 178:onewire/onewire.c ****     }
 179:onewire/onewire.c **** 
 180:onewire/onewire.c ****     return data;
 181:onewire/onewire.c **** 
 182:onewire/onewire.c **** } /* }}} */
 183:onewire/onewire.c **** 
 184:onewire/onewire.c **** 
 185:onewire/onewire.c **** /* mid-level functions */
 186:onewire/onewire.c **** int8_t noinline ow_read_rom(struct ow_rom_code_t *rom)
 187:onewire/onewire.c **** /* {{{ */ {
 188:onewire/onewire.c **** 
 189:onewire/onewire.c ****     /* reset the bus */
 190:onewire/onewire.c ****     if (!reset_onewire())
 191:onewire/onewire.c ****         return -1;
 192:onewire/onewire.c **** 
 193:onewire/onewire.c ****     /* transmit command byte */
 194:onewire/onewire.c ****     ow_write_byte(OW_ROM_READ_ROM);
 195:onewire/onewire.c **** 
 196:onewire/onewire.c ****     /* read 64bit rom code */
 197:onewire/onewire.c ****     for (uint8_t i = 0; i < 8; i++) {
 198:onewire/onewire.c **** 
 199:onewire/onewire.c ****         /* read byte */
 200:onewire/onewire.c ****         rom->bytewise[i] = ow_read_byte();
 201:onewire/onewire.c ****     }
 202:onewire/onewire.c **** 
 203:onewire/onewire.c ****     /* check CRC (last byte) */
 204:onewire/onewire.c ****     if (rom->crc != crc_checksum(rom->bytewise, 7))
 205:onewire/onewire.c ****         return -2;
 206:onewire/onewire.c **** 
 207:onewire/onewire.c ****     return 1;
 208:onewire/onewire.c **** 
 209:onewire/onewire.c **** } /* }}} */
 210:onewire/onewire.c **** 
 211:onewire/onewire.c **** int8_t noinline ow_skip_rom(void)
 212:onewire/onewire.c **** /* {{{ */ {
 213:onewire/onewire.c **** 
 214:onewire/onewire.c ****     /* reset the bus */
 215:onewire/onewire.c ****     if (!reset_onewire())
 216:onewire/onewire.c ****         return -1;
 217:onewire/onewire.c **** 
 218:onewire/onewire.c ****     /* transmit command byte */
 219:onewire/onewire.c ****     ow_write_byte(OW_ROM_SKIP_ROM);
 220:onewire/onewire.c **** 
 221:onewire/onewire.c ****     return 1;
 222:onewire/onewire.c **** 
 223:onewire/onewire.c **** } /* }}} */
 224:onewire/onewire.c **** 
 225:onewire/onewire.c **** int8_t noinline ow_match_rom(struct ow_rom_code_t *rom)
 226:onewire/onewire.c **** /* {{{ */ {
 227:onewire/onewire.c **** 
 228:onewire/onewire.c ****     /* reset the bus */
 229:onewire/onewire.c ****     if (!reset_onewire())
 230:onewire/onewire.c ****         return -1;
 231:onewire/onewire.c **** 
 232:onewire/onewire.c ****     /* transmit command byte */
 233:onewire/onewire.c ****     ow_write_byte(OW_ROM_MATCH_ROM);
 234:onewire/onewire.c **** 
 235:onewire/onewire.c ****     /* transmit rom code */
 236:onewire/onewire.c ****     for (uint8_t i = 0; i < 8; i++) {
 237:onewire/onewire.c **** 
 238:onewire/onewire.c ****         for (uint8_t j = 0; j < 8; j++)
 239:onewire/onewire.c ****             ow_write(rom->bytewise[i] & _BV(j));
 240:onewire/onewire.c **** 
 241:onewire/onewire.c ****     }
 242:onewire/onewire.c **** 
 243:onewire/onewire.c ****     return 1;
 244:onewire/onewire.c **** 
 245:onewire/onewire.c **** } /* }}} */
 246:onewire/onewire.c **** 
 247:onewire/onewire.c **** 
 248:onewire/onewire.c **** void noinline ow_set_address_bit(struct ow_rom_code_t *rom, uint8_t idx, uint8_t val)
 249:onewire/onewire.c **** /* {{{ */ {
 173               	.LM3:
 174               	/* prologue: frame size=0 */
 175               	/* prologue end (size=0) */
 176 0008 FC01      		movw r30,r24
 250:onewire/onewire.c **** 
 251:onewire/onewire.c ****     uint8_t byte = idx / 8;
 252:onewire/onewire.c ****     uint8_t bit = idx % 8;
 178               	.LM4:
 179 000a 862F      		mov r24,r22
 180 000c 8770      		andi r24,lo8(7)
 181 000e 6695      		lsr r22
 182 0010 6695      		lsr r22
 183 0012 6695      		lsr r22
 184 0014 7727      		clr r23
 185 0016 282F      		mov r18,r24
 186 0018 3327      		clr r19
 253:onewire/onewire.c **** 
 254:onewire/onewire.c ****     if (val == 0)
 188               	.LM5:
 189 001a 4423      		tst r20
 190 001c 69F4      		brne .L4
 255:onewire/onewire.c ****         rom->bytewise[byte] &= ~_BV(bit);
 192               	.LM6:
 193 001e E60F      		add r30,r22
 194 0020 F71F      		adc r31,r23
 195 0022 81E0      		ldi r24,lo8(1)
 196 0024 90E0      		ldi r25,hi8(1)
 197 0026 02C0      		rjmp 2f
 198 0028 880F      	1:	lsl r24
 199 002a 991F      		rol r25
 200 002c 2A95      	2:	dec r18
 201 002e E2F7      		brpl 1b
 202 0030 8095      		com r24
 203 0032 2081      		ld r18,Z
 204 0034 2823      		and r18,r24
 205 0036 0BC0      		rjmp .L8
 206               	.L4:
 256:onewire/onewire.c ****     else
 257:onewire/onewire.c ****         rom->bytewise[byte] |= _BV(bit);
 208               	.LM7:
 209 0038 E60F      		add r30,r22
 210 003a F71F      		adc r31,r23
 211 003c 81E0      		ldi r24,lo8(1)
 212 003e 90E0      		ldi r25,hi8(1)
 213 0040 02C0      		rjmp 2f
 214 0042 880F      	1:	lsl r24
 215 0044 991F      		rol r25
 216 0046 2A95      	2:	dec r18
 217 0048 E2F7      		brpl 1b
 218 004a 2081      		ld r18,Z
 219 004c 282B      		or r18,r24
 220               	.L8:
 221 004e 2083      		st Z,r18
 222 0050 0895      		ret
 223               	/* epilogue: frame size=0 */
 224               	/* epilogue: noreturn */
 225               	/* epilogue end (size=0) */
 226               	/* function ow_set_address_bit size 39 (39) */
 231               	.Lscope1:
 233               		.stabd	78,0,0
 236               	.global	ow_temp_sensor
 238               	ow_temp_sensor:
 239               		.stabd	46,0,0
 258:onewire/onewire.c **** 
 259:onewire/onewire.c **** /* }}} */ }
 260:onewire/onewire.c **** 
 261:onewire/onewire.c **** /* high-level functions */
 262:onewire/onewire.c **** int8_t noinline ow_search_rom(uint8_t first)
 263:onewire/onewire.c **** /* {{{ */ {
 264:onewire/onewire.c **** 
 265:onewire/onewire.c ****     /* reset discover state machine */
 266:onewire/onewire.c ****     if (first) {
 267:onewire/onewire.c ****         ow_global.last_discrepancy = -1;
 268:onewire/onewire.c ****         ow_global.rom_index = 0;
 269:onewire/onewire.c **** 
 270:onewire/onewire.c ****         /* reset rom code */
 271:onewire/onewire.c ****         for (uint8_t i = 0; i < 8; i++)
 272:onewire/onewire.c ****             ow_global.current_rom.bytewise[i] = 0;
 273:onewire/onewire.c **** 
 274:onewire/onewire.c ****     } else {
 275:onewire/onewire.c **** 
 276:onewire/onewire.c ****         /* if last_discrepancy is below zero, discovery is done */
 277:onewire/onewire.c ****         if (ow_global.last_discrepancy < 0)
 278:onewire/onewire.c ****             return 0;
 279:onewire/onewire.c **** 
 280:onewire/onewire.c ****     }
 281:onewire/onewire.c **** 
 282:onewire/onewire.c ****     uint8_t discrepancy = -1;
 283:onewire/onewire.c **** 
 284:onewire/onewire.c ****     /* reset the bus */
 285:onewire/onewire.c ****     if (!reset_onewire())
 286:onewire/onewire.c ****         return -1;
 287:onewire/onewire.c **** 
 288:onewire/onewire.c ****     /* transmit command byte */
 289:onewire/onewire.c ****     ow_write_byte(OW_ROM_SEARCH_ROM);
 290:onewire/onewire.c **** 
 291:onewire/onewire.c ****     for (uint8_t i = 0; i <64; i++) {
 292:onewire/onewire.c **** 
 293:onewire/onewire.c ****         /* read bits */
 294:onewire/onewire.c ****         uint8_t bit1 = ow_read();
 295:onewire/onewire.c ****         uint8_t bits = (ow_read() << 1) | bit1;
 296:onewire/onewire.c **** 
 297:onewire/onewire.c ****         if (bits == 3) {
 298:onewire/onewire.c **** 
 299:onewire/onewire.c ****             /* no devices, just return */
 300:onewire/onewire.c ****             return 0;
 301:onewire/onewire.c **** 
 302:onewire/onewire.c ****         } else if (bits == 0) {
 303:onewire/onewire.c **** 
 304:onewire/onewire.c ****             if (i == ow_global.last_discrepancy) {
 305:onewire/onewire.c **** 
 306:onewire/onewire.c ****                 /* set one */
 307:onewire/onewire.c ****                 ow_set_address_bit(&ow_global.current_rom, i, 1);
 308:onewire/onewire.c **** 
 309:onewire/onewire.c ****                 /* transmit one next time */
 310:onewire/onewire.c ****                 bit1 = 1;
 311:onewire/onewire.c **** 
 312:onewire/onewire.c ****             } else if (i > ow_global.last_discrepancy) {
 313:onewire/onewire.c **** 
 314:onewire/onewire.c ****                 /* set zero */
 315:onewire/onewire.c ****                 ow_set_address_bit(&ow_global.current_rom, i, 0);
 316:onewire/onewire.c ****                 discrepancy = i;
 317:onewire/onewire.c **** 
 318:onewire/onewire.c ****             } else {
 319:onewire/onewire.c **** 
 320:onewire/onewire.c ****                 uint8_t rom_bit = ow_global.current_rom.bytewise[i / 8] & _BV(i % 8);
 321:onewire/onewire.c **** 
 322:onewire/onewire.c ****                 if (rom_bit == 0)
 323:onewire/onewire.c ****                     discrepancy = i;
 324:onewire/onewire.c **** 
 325:onewire/onewire.c ****                 /* transmit last bit next time */
 326:onewire/onewire.c ****                 bit1 = rom_bit;
 327:onewire/onewire.c **** 
 328:onewire/onewire.c ****             }
 329:onewire/onewire.c **** 
 330:onewire/onewire.c ****         } else {
 331:onewire/onewire.c **** 
 332:onewire/onewire.c ****             /* normal case, no discrepancy */
 333:onewire/onewire.c ****             ow_set_address_bit(&ow_global.current_rom, i, bit1);
 334:onewire/onewire.c **** 
 335:onewire/onewire.c ****         }
 336:onewire/onewire.c **** 
 337:onewire/onewire.c ****         OW_CONFIG_OUTPUT();
 338:onewire/onewire.c **** 
 339:onewire/onewire.c ****         /* select next bit */
 340:onewire/onewire.c ****         ow_write(bit1);
 341:onewire/onewire.c **** 
 342:onewire/onewire.c ****     }
 343:onewire/onewire.c **** 
 344:onewire/onewire.c ****     ow_global.last_discrepancy = discrepancy;
 345:onewire/onewire.c **** 
 346:onewire/onewire.c ****     /* new device discovered */
 347:onewire/onewire.c ****     return 1;
 348:onewire/onewire.c **** 
 349:onewire/onewire.c **** } /* }}} */
 350:onewire/onewire.c **** 
 351:onewire/onewire.c **** /*
 352:onewire/onewire.c ****  *
 353:onewire/onewire.c ****  * temperature functions
 354:onewire/onewire.c ****  *
 355:onewire/onewire.c ****  */
 356:onewire/onewire.c **** 
 357:onewire/onewire.c **** int8_t ow_temp_sensor(struct ow_rom_code_t *rom)
 358:onewire/onewire.c **** /* {{{ */ {
 241               	.LM8:
 242               	/* prologue: frame size=0 */
 243               	/* prologue end (size=0) */
 244 0052 FC01      		movw r30,r24
 359:onewire/onewire.c **** 
 360:onewire/onewire.c ****     /* check for known family code */
 361:onewire/onewire.c ****     if (rom->family == OW_FAMILY_DS1820 ||
 246               	.LM9:
 247 0054 E081      		ld r30,Z
 248 0056 E031      		cpi r30,lo8(16)
 249 0058 19F4      		brne .L10
 251               	.LM10:
 252 005a 81E0      		ldi r24,lo8(1)
 253 005c 90E0      		ldi r25,hi8(1)
 254 005e 0895      		ret
 255               	.L10:
 256 0060 80E0      		ldi r24,lo8(0)
 257 0062 90E0      		ldi r25,hi8(0)
 258 0064 E232      		cpi r30,lo8(34)
 259 0066 11F4      		brne .L12
 260 0068 81E0      		ldi r24,lo8(1)
 261 006a 90E0      		ldi r25,hi8(1)
 262               	.L12:
 362:onewire/onewire.c ****             rom->family == OW_FAMILY_DS1822)
 363:onewire/onewire.c ****         return 1;
 364:onewire/onewire.c **** 
 365:onewire/onewire.c ****     return 0;
 366:onewire/onewire.c **** 
 367:onewire/onewire.c **** } /* }}} */
 264               	.LM11:
 265 006c 0895      		ret
 266               	/* epilogue: frame size=0 */
 267               	/* epilogue: noreturn */
 268               	/* epilogue end (size=0) */
 269               	/* function ow_temp_sensor size 14 (14) */
 271               	.Lscope2:
 273               		.stabd	78,0,0
 277               	.global	ow_temp_normalize
 279               	ow_temp_normalize:
 280               		.stabd	46,0,0
 368:onewire/onewire.c **** 
 369:onewire/onewire.c **** int8_t ow_temp_start_convert(struct ow_rom_code_t *rom, uint8_t wait)
 370:onewire/onewire.c **** /* {{{ */ {
 371:onewire/onewire.c **** 
 372:onewire/onewire.c ****     int8_t ret;
 373:onewire/onewire.c **** 
 374:onewire/onewire.c ****     if (rom == NULL)
 375:onewire/onewire.c ****         ret = ow_skip_rom();
 376:onewire/onewire.c ****     else {
 377:onewire/onewire.c **** 
 378:onewire/onewire.c ****         /* check for known family code */
 379:onewire/onewire.c ****         if (!ow_temp_sensor(rom))
 380:onewire/onewire.c ****             return -2;
 381:onewire/onewire.c **** 
 382:onewire/onewire.c ****         ret = ow_match_rom(rom);
 383:onewire/onewire.c **** 
 384:onewire/onewire.c ****     }
 385:onewire/onewire.c **** 
 386:onewire/onewire.c ****     if (ret < 0)
 387:onewire/onewire.c ****         return ret;
 388:onewire/onewire.c **** 
 389:onewire/onewire.c ****     /* transmit command byte */
 390:onewire/onewire.c ****     ow_write_byte(OW_FUNC_CONVERT);
 391:onewire/onewire.c **** 
 392:onewire/onewire.c ****     OW_CONFIG_OUTPUT();
 393:onewire/onewire.c ****     OW_HIGH();
 394:onewire/onewire.c **** 
 395:onewire/onewire.c ****     if (!wait)
 396:onewire/onewire.c ****         return 0;
 397:onewire/onewire.c **** 
 398:onewire/onewire.c ****     while(!ow_read());
 399:onewire/onewire.c **** 
 400:onewire/onewire.c ****     return 1;
 401:onewire/onewire.c **** 
 402:onewire/onewire.c **** } /* }}} */
 403:onewire/onewire.c **** 
 404:onewire/onewire.c **** int8_t ow_temp_read_scratchpad(struct ow_rom_code_t *rom, struct ow_temp_scratchpad_t *scratchpad)
 405:onewire/onewire.c **** /* {{{ */ {
 406:onewire/onewire.c **** 
 407:onewire/onewire.c ****     int8_t ret;
 408:onewire/onewire.c **** 
 409:onewire/onewire.c ****     if (rom == NULL)
 410:onewire/onewire.c ****         ret = ow_skip_rom();
 411:onewire/onewire.c ****     else {
 412:onewire/onewire.c **** 
 413:onewire/onewire.c ****         /* check for known family code */
 414:onewire/onewire.c ****         if (!ow_temp_sensor(rom))
 415:onewire/onewire.c ****             return -3;
 416:onewire/onewire.c **** 
 417:onewire/onewire.c ****         ret = ow_match_rom(rom);
 418:onewire/onewire.c ****     }
 419:onewire/onewire.c **** 
 420:onewire/onewire.c ****     if (ret < 0)
 421:onewire/onewire.c ****         return ret;
 422:onewire/onewire.c **** 
 423:onewire/onewire.c ****     /* transmit command byte */
 424:onewire/onewire.c ****     ow_write_byte(OW_FUNC_READ_SP);
 425:onewire/onewire.c **** 
 426:onewire/onewire.c ****     for (uint8_t i = 0; i < 9; i++) {
 427:onewire/onewire.c **** 
 428:onewire/onewire.c ****         /* read byte */
 429:onewire/onewire.c ****         scratchpad->bytewise[i] = ow_read_byte();
 430:onewire/onewire.c **** 
 431:onewire/onewire.c ****     }
 432:onewire/onewire.c **** 
 433:onewire/onewire.c ****     /* check CRC (last byte) */
 434:onewire/onewire.c ****     if (scratchpad->crc != crc_checksum(&scratchpad->bytewise, 8))
 435:onewire/onewire.c ****         return -2;
 436:onewire/onewire.c **** 
 437:onewire/onewire.c ****     return 1;
 438:onewire/onewire.c **** 
 439:onewire/onewire.c **** } /* }}} */
 440:onewire/onewire.c **** 
 441:onewire/onewire.c **** int8_t ow_temp_power(struct ow_rom_code_t *rom)
 442:onewire/onewire.c **** /* {{{ */ {
 443:onewire/onewire.c **** 
 444:onewire/onewire.c ****     int8_t ret;
 445:onewire/onewire.c **** 
 446:onewire/onewire.c ****     if (rom == NULL)
 447:onewire/onewire.c ****         ret = ow_skip_rom();
 448:onewire/onewire.c ****     else {
 449:onewire/onewire.c ****         if (!ow_temp_sensor(rom))
 450:onewire/onewire.c ****             return -2;
 451:onewire/onewire.c **** 
 452:onewire/onewire.c ****         ret = ow_match_rom(rom);
 453:onewire/onewire.c ****     }
 454:onewire/onewire.c **** 
 455:onewire/onewire.c ****     if (ret < 0)
 456:onewire/onewire.c ****         return ret;
 457:onewire/onewire.c **** 
 458:onewire/onewire.c ****     /* transmit command byte */
 459:onewire/onewire.c ****     ow_write_byte(OW_FUNC_READ_POWER);
 460:onewire/onewire.c **** 
 461:onewire/onewire.c ****     return ow_read();
 462:onewire/onewire.c **** 
 463:onewire/onewire.c **** } /* }}} */
 464:onewire/onewire.c **** 
 465:onewire/onewire.c **** int16_t ow_temp_normalize(struct ow_rom_code_t *rom, struct ow_temp_scratchpad_t *sp)
 466:onewire/onewire.c **** /* {{{ */ {
 282               	.LM12:
 283               	/* prologue: frame size=0 */
 284               	/* prologue end (size=0) */
 285 006e FC01      		movw r30,r24
 286 0070 DB01      		movw r26,r22
 467:onewire/onewire.c **** 
 468:onewire/onewire.c ****     if (rom->family == OW_FAMILY_DS1820)
 288               	.LM13:
 289 0072 E081      		ld r30,Z
 290 0074 E031      		cpi r30,lo8(16)
 291 0076 41F4      		brne .L16
 469:onewire/onewire.c ****         return sp->temperature << 7;
 293               	.LM14:
 294 0078 8D91      		ld r24,X+
 295 007a 9C91      		ld r25,X
 296 007c 9695      		lsr r25
 297 007e 982F      		mov r25,r24
 298 0080 8827      		clr r24
 299 0082 9795      		ror r25
 300 0084 8795      		ror r24
 301 0086 0895      		ret
 302               	.L16:
 470:onewire/onewire.c ****     else if (rom->family == OW_FAMILY_DS1822)
 304               	.LM15:
 305 0088 E232      		cpi r30,lo8(34)
 306 008a 19F0      		breq .L19
 307 008c 8FEF      		ldi r24,lo8(-1)
 308 008e 9FEF      		ldi r25,hi8(-1)
 309 0090 0895      		ret
 310               	.L19:
 471:onewire/onewire.c ****         return sp->temperature << 4;
 312               	.LM16:
 313 0092 8D91      		ld r24,X+
 314 0094 9C91      		ld r25,X
 315 0096 24E0      		ldi r18,4
 316 0098 880F      	1:	lsl r24
 317 009a 991F      		rol r25
 318 009c 2A95      		dec r18
 319 009e E1F7      		brne 1b
 472:onewire/onewire.c ****     else
 473:onewire/onewire.c ****         return 0xffff;
 474:onewire/onewire.c **** 
 475:onewire/onewire.c **** } /* }}} */
 321               	.LM17:
 322 00a0 0895      		ret
 323               	/* epilogue: frame size=0 */
 324               	/* epilogue: noreturn */
 325               	/* epilogue end (size=0) */
 326               	/* function ow_temp_normalize size 26 (26) */
 328               	.Lscope3:
 330               		.stabd	78,0,0
 332               	.global	reset_onewire
 334               	reset_onewire:
 335               		.stabd	46,0,0
 337               	.LM18:
 338               	/* prologue: frame size=0 */
 339               	/* prologue end (size=0) */
 341               	.LM19:
 342 00a2 569A      		sbi 42-0x20,6
 344               	.LM20:
 345 00a4 5E98      		cbi 43-0x20,6
 346               	.LBB8:
 347               	.LBB9:
 349               	.Ltext1:
   1:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****    All rights reserved.
   4:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
   5:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
   8:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  11:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****      distribution.
  15:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  16:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  20:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  32:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** /* $Id: delay.h,v 1.1.2.1 2005/12/12 23:19:49 joerg_wunsch Exp $ */
  33:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  34:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  35:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  36:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  37:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  38:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  39:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Busy-wait delay loops
  40:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     \code
  41:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  42:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  43:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  44:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     \endcode
  45:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  47:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  48:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  49:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     used.
  50:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  51:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     The functions in this header file implement simple delay loops
  52:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     that perform a busy-waiting.  They are typically used to
  53:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     facilitate short delays in the program execution.  They are
  54:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     implemented as count-down loops with a well-known CPU cycle
  55:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     count per loop iteration.  As such, no other processing can
  56:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     occur simultaneously.  It should be kept in mind that the
  57:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     functions described here do not disable interrupts.
  58:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     In general, for long delays, the use of hardware timers is
  60:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     much preferrable, as they free the CPU, and allow for
  61:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     concurrent processing of other events while the timer is
  62:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     running.  However, in particular for very short delays, the
  63:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     overhead of setting up a hardware timer is too much compared
  64:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     to the overall delay time.
  65:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  66:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     Two inline functions are provided for the actual delay algorithms.
  67:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     Two wrapper functions allow the specification of microsecond, and
  69:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  70:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).  These functions
  71:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     operate on double typed arguments, however when optimization is
  72:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     turned on, the entire floating-point calculation will be done at
  73:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     compile-time.
  74:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  75:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     \note When using _delay_us() and _delay_ms(), the expressions
  76:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     passed as arguments to these functions shall be compile-time
  77:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     constants, otherwise the floating-point calculations to setup the
  78:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     loops will be done at run-time, thereby drastically increasing
  79:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     both the resulting code size, as well as the time required to
  80:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     setup the loops.
  81:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  87:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  88:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** #endif
  89:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  90:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** /** \ingroup util_delay
  91:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  92:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  93:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     iterations are possible.  (The value 256 would have to be passed
  94:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  95:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     including the overhead the compiler needs to setup the counter
  96:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     register.
  97:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  99:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     can be achieved.
 100:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** */
 101:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** void
 102:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** _delay_loop_1(uint8_t __count)
 103:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** {
 104:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 	__asm__ volatile (
 105:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 		"1: dec %0" "\n\t"
 106:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 		"brne 1b"
 107:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 		: "=r" (__count)
 108:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 		: "0" (__count)
 109:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 	);
 110:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** }
 111:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** /** \ingroup util_delay
 113:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
 115:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     iterations are possible.  (The value 65536 would have to be
 116:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
 117:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     not including the overhead the compiler requires to setup the
 118:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     counter register pair.
 119:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 121:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****     milliseconds can be achieved.
 122:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h ****  */
 123:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** void
 124:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** _delay_loop_2(uint16_t __count)
 125:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** {
 126:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/delay.h **** 	__asm__ volatile (
 351               	.LM21:
 352 00a6 80E6      		ldi r24,lo8(2400)
 353 00a8 99E0      		ldi r25,hi8(2400)
 354               	/* #APP */
 355 00aa 0197      		1: sbiw r24,1
 356 00ac F1F7      		brne 1b
 357               	/* #NOAPP */
 358               	.LBE9:
 359               	.LBE8:
 361               	.Ltext2:
 363               	.LM22:
 364 00ae 5E9A      		sbi 43-0x20,6
 366               	.LM23:
 367 00b0 5E9A      		sbi 43-0x20,6
 368 00b2 5698      		cbi 42-0x20,6
 369               	.LBB10:
 370               	.LBB11:
 372               	.Ltext3:
 374               	.LM24:
 375 00b4 82EC      		ldi r24,lo8(450)
 376 00b6 91E0      		ldi r25,hi8(450)
 377               	/* #APP */
 378 00b8 0197      		1: sbiw r24,1
 379 00ba F1F7      		brne 1b
 380               	/* #NOAPP */
 381               	.LBE11:
 382               	.LBE10:
 384               	.Ltext4:
 386               	.LM25:
 387 00bc 29B1      		in r18,41-0x20
 388               	.LBB12:
 389               	.LBB13:
 391               	.Ltext5:
 393               	.LM26:
 394 00be 8EE9      		ldi r24,lo8(1950)
 395 00c0 97E0      		ldi r25,hi8(1950)
 396               	/* #APP */
 397 00c2 0197      		1: sbiw r24,1
 398 00c4 F1F7      		brne 1b
 399               	/* #NOAPP */
 400               	.LBE13:
 401               	.LBE12:
 403               	.Ltext6:
 405               	.LM27:
 406 00c6 89B1      		in r24,41-0x20
 408               	.LM28:
 409 00c8 26FF      		sbrs r18,6
 410 00ca 03C0      		rjmp .L23
 412               	.LM29:
 413 00cc 80E0      		ldi r24,lo8(0)
 414 00ce 90E0      		ldi r25,hi8(0)
 415 00d0 0895      		ret
 416               	.L23:
 417 00d2 90E0      		ldi r25,lo8(0)
 418 00d4 86FF      		sbrs r24,6
 419 00d6 91E0      		ldi r25,lo8(1)
 420               	.L26:
 421 00d8 81E0      		ldi r24,lo8(1)
 422 00da 9827      		eor r25,r24
 423 00dc 892F      		mov r24,r25
 424 00de 9927      		clr r25
 426               	.LM30:
 427 00e0 0895      		ret
 428               	/* epilogue: frame size=0 */
 429               	/* epilogue: noreturn */
 430               	/* epilogue end (size=0) */
 431               	/* function reset_onewire size 39 (39) */
 442               	.Lscope4:
 444               		.stabd	78,0,0
 446               	.global	ow_write_0
 448               	ow_write_0:
 449               		.stabd	46,0,0
 451               	.LM31:
 452               	/* prologue: frame size=0 */
 453               	/* prologue end (size=0) */
 455               	.LM32:
 456 00e2 5E98      		cbi 43-0x20,6
 457               	.LBB16:
 458               	.LBB17:
 460               	.Ltext7:
 462               	.LM33:
 463 00e4 84EA      		ldi r24,lo8(420)
 464 00e6 91E0      		ldi r25,hi8(420)
 465               	/* #APP */
 466 00e8 0197      		1: sbiw r24,1
 467 00ea F1F7      		brne 1b
 468               	/* #NOAPP */
 469               	.LBE17:
 470               	.LBE16:
 472               	.Ltext8:
 474               	.LM34:
 475 00ec 5E9A      		sbi 43-0x20,6
 476               	/* epilogue: frame size=0 */
 477 00ee 0895      		ret
 478               	/* epilogue end (size=1) */
 479               	/* function ow_write_0 size 9 (8) */
 484               	.Lscope5:
 486               		.stabd	78,0,0
 488               	.global	ow_write_1
 490               	ow_write_1:
 491               		.stabd	46,0,0
 493               	.LM35:
 494               	/* prologue: frame size=0 */
 495               	/* prologue end (size=0) */
 497               	.LM36:
 498 00f0 5E98      		cbi 43-0x20,6
 499               	.LBB22:
 500               	.LBB23:
 502               	.Ltext9:
 504               	.LM37:
 505 00f2 84E1      		ldi r24,lo8(20)
 506 00f4 90E0      		ldi r25,hi8(20)
 507               	/* #APP */
 508 00f6 0197      		1: sbiw r24,1
 509 00f8 F1F7      		brne 1b
 510               	/* #NOAPP */
 511               	.LBE23:
 512               	.LBE22:
 514               	.Ltext10:
 516               	.LM38:
 517 00fa 5E9A      		sbi 43-0x20,6
 518               	.LBB24:
 519               	.LBB25:
 521               	.Ltext11:
 523               	.LM39:
 524 00fc 80E9      		ldi r24,lo8(400)
 525 00fe 91E0      		ldi r25,hi8(400)
 526               	/* #APP */
 527 0100 0197      		1: sbiw r24,1
 528 0102 F1F7      		brne 1b
 529               	/* #NOAPP */
 530               	.LBE25:
 531               	.LBE24:
 532               	/* epilogue: frame size=0 */
 533 0104 0895      		ret
 534               	/* epilogue end (size=1) */
 535               	/* function ow_write_1 size 15 (14) */
 543               	.Lscope6:
 545               		.stabd	78,0,0
 548               	.global	ow_write
 550               	ow_write:
 551               		.stabd	46,0,0
 553               	.Ltext12:
 555               	.LM40:
 556               	/* prologue: frame size=0 */
 557               	/* prologue end (size=0) */
 559               	.LM41:
 560 0106 8823      		tst r24
 561 0108 19F0      		breq .L33
 563               	.LM42:
 564 010a 0E94 0000 		call ow_write_1
 565 010e 0895      		ret
 566               	.L33:
 568               	.LM43:
 569 0110 0E94 0000 		call ow_write_0
 570 0114 0895      		ret
 571               	/* epilogue: frame size=0 */
 572               	/* epilogue: noreturn */
 573               	/* epilogue end (size=0) */
 574               	/* function ow_write size 8 (8) */
 576               	.Lscope7:
 578               		.stabd	78,0,0
 581               	.global	ow_write_byte
 583               	ow_write_byte:
 584               		.stabd	46,0,0
 586               	.LM44:
 587               	/* prologue: frame size=0 */
 588 0116 1F93      		push r17
 589 0118 CF93      		push r28
 590 011a DF93      		push r29
 591               	/* prologue end (size=3) */
 592 011c 182F      		mov r17,r24
 594               	.LM45:
 595 011e 569A      		sbi 42-0x20,6
 596 0120 C0E0      		ldi r28,lo8(0)
 597 0122 D0E0      		ldi r29,hi8(0)
 598               	.L38:
 599               	.LBB27:
 601               	.LM46:
 602 0124 81E0      		ldi r24,lo8(1)
 603 0126 90E0      		ldi r25,hi8(1)
 604 0128 0C2E      		mov r0,r28
 605 012a 02C0      		rjmp 2f
 606 012c 880F      	1:	lsl r24
 607 012e 991F      		rol r25
 608 0130 0A94      	2:	dec r0
 609 0132 E2F7      		brpl 1b
 610 0134 8123      		and r24,r17
 611 0136 0E94 0000 		call ow_write
 612 013a 2196      		adiw r28,1
 614               	.LM47:
 615 013c C830      		cpi r28,8
 616 013e D105      		cpc r29,__zero_reg__
 617 0140 89F7      		brne .L38
 618               	.LBE27:
 619               	/* epilogue: frame size=0 */
 620 0142 DF91      		pop r29
 621 0144 CF91      		pop r28
 622 0146 1F91      		pop r17
 623 0148 0895      		ret
 624               	/* epilogue end (size=4) */
 625               	/* function ow_write_byte size 26 (19) */
 627               	.Lscope8:
 629               		.stabd	78,0,0
 632               	.global	ow_match_rom
 634               	ow_match_rom:
 635               		.stabd	46,0,0
 637               	.LM48:
 638               	/* prologue: frame size=0 */
 639 014a FF92      		push r15
 640 014c 0F93      		push r16
 641 014e 1F93      		push r17
 642 0150 CF93      		push r28
 643 0152 DF93      		push r29
 644               	/* prologue end (size=5) */
 645 0154 EC01      		movw r28,r24
 647               	.LM49:
 648 0156 0E94 0000 		call reset_onewire
 649 015a 8823      		tst r24
 650 015c 19F4      		brne .L44
 652               	.LM50:
 653 015e 8FEF      		ldi r24,lo8(-1)
 654 0160 9FEF      		ldi r25,hi8(-1)
 655 0162 23C0      		rjmp .L46
 656               	.L44:
 658               	.LM51:
 659 0164 85E5      		ldi r24,lo8(85)
 660 0166 0E94 0000 		call ow_write_byte
 661 016a 8E01      		movw r16,r28
 662 016c FF24      		clr r15
 663 016e 1AC0      		rjmp .L47
 664               	.L52:
 665               	.LBB30:
 667               	.LM52:
 668 0170 81E0      		ldi r24,lo8(1)
 669 0172 90E0      		ldi r25,hi8(1)
 670 0174 1AC0      		rjmp .L46
 671               	.L48:
 672               	.LBB31:
 674               	.LM53:
 675 0176 21E0      		ldi r18,lo8(1)
 676 0178 30E0      		ldi r19,hi8(1)
 677 017a 0C2E      		mov r0,r28
 678 017c 02C0      		rjmp 2f
 679 017e 220F      	1:	lsl r18
 680 0180 331F      		rol r19
 681 0182 0A94      	2:	dec r0
 682 0184 E2F7      		brpl 1b
 683 0186 F801      		movw r30,r16
 684 0188 8081      		ld r24,Z
 685 018a 8223      		and r24,r18
 686 018c 0E94 0000 		call ow_write
 687 0190 2196      		adiw r28,1
 689               	.LM54:
 690 0192 C830      		cpi r28,8
 691 0194 D105      		cpc r29,__zero_reg__
 692 0196 79F7      		brne .L48
 693               	.LBE31:
 695               	.LM55:
 696 0198 F394      		inc r15
 697 019a 0F5F      		subi r16,lo8(-(1))
 698 019c 1F4F      		sbci r17,hi8(-(1))
 699 019e F8E0      		ldi r31,lo8(8)
 700 01a0 FF16      		cp r15,r31
 701 01a2 31F3      		breq .L52
 702               	.L47:
 703 01a4 C0E0      		ldi r28,lo8(0)
 704 01a6 D0E0      		ldi r29,hi8(0)
 705 01a8 E6CF      		rjmp .L48
 706               	.L46:
 707               	.LBE30:
 708               	/* epilogue: frame size=0 */
 709 01aa DF91      		pop r29
 710 01ac CF91      		pop r28
 711 01ae 1F91      		pop r17
 712 01b0 0F91      		pop r16
 713 01b2 FF90      		pop r15
 714 01b4 0895      		ret
 715               	/* epilogue end (size=6) */
 716               	/* function ow_match_rom size 54 (43) */
 721               	.Lscope9:
 723               		.stabd	78,0,0
 725               	.global	ow_skip_rom
 727               	ow_skip_rom:
 728               		.stabd	46,0,0
 730               	.LM56:
 731               	/* prologue: frame size=0 */
 732               	/* prologue end (size=0) */
 734               	.LM57:
 735 01b6 0E94 0000 		call reset_onewire
 736 01ba 8823      		tst r24
 737 01bc 19F4      		brne .L56
 739               	.LM58:
 740 01be 8FEF      		ldi r24,lo8(-1)
 741 01c0 9FEF      		ldi r25,hi8(-1)
 742 01c2 0895      		ret
 743               	.L56:
 745               	.LM59:
 746 01c4 8CEC      		ldi r24,lo8(-52)
 747 01c6 0E94 0000 		call ow_write_byte
 748 01ca 81E0      		ldi r24,lo8(1)
 749 01cc 90E0      		ldi r25,hi8(1)
 751               	.LM60:
 752 01ce 0895      		ret
 753               	/* epilogue: frame size=0 */
 754               	/* epilogue: noreturn */
 755               	/* epilogue end (size=0) */
 756               	/* function ow_skip_rom size 13 (13) */
 758               	.Lscope10:
 760               		.stabd	78,0,0
 762               	.global	ow_read
 764               	ow_read:
 765               		.stabd	46,0,0
 767               	.LM61:
 768               	/* prologue: frame size=0 */
 769               	/* prologue end (size=0) */
 771               	.LM62:
 772 01d0 569A      		sbi 42-0x20,6
 774               	.LM63:
 775 01d2 5E98      		cbi 43-0x20,6
 776               	.LBB38:
 777               	.LBB39:
 779               	.Ltext13:
 781               	.LM64:
 782 01d4 85E0      		ldi r24,lo8(5)
 783 01d6 90E0      		ldi r25,hi8(5)
 784               	/* #APP */
 785 01d8 0197      		1: sbiw r24,1
 786 01da F1F7      		brne 1b
 787               	/* #NOAPP */
 788               	.LBE39:
 789               	.LBE38:
 791               	.Ltext14:
 793               	.LM65:
 794 01dc 5E9A      		sbi 43-0x20,6
 796               	.LM66:
 797 01de 5E9A      		sbi 43-0x20,6
 798 01e0 5698      		cbi 42-0x20,6
 799               	.LBB40:
 800               	.LBB41:
 802               	.Ltext15:
 804               	.LM67:
 805 01e2 86E4      		ldi r24,lo8(70)
 806 01e4 90E0      		ldi r25,hi8(70)
 807               	/* #APP */
 808 01e6 0197      		1: sbiw r24,1
 809 01e8 F1F7      		brne 1b
 810               	/* #NOAPP */
 811               	.LBE41:
 812               	.LBE40:
 814               	.Ltext16:
 816               	.LM68:
 817 01ea 29B1      		in r18,41-0x20
 818               	.LBB42:
 819               	.LBB43:
 821               	.Ltext17:
 823               	.LM69:
 824 01ec 85E4      		ldi r24,lo8(325)
 825 01ee 91E0      		ldi r25,hi8(325)
 826               	/* #APP */
 827 01f0 0197      		1: sbiw r24,1
 828 01f2 F1F7      		brne 1b
 829               	/* #NOAPP */
 830 01f4 80E0      		ldi r24,lo8(0)
 831 01f6 90E0      		ldi r25,hi8(0)
 832 01f8 26FF      		sbrs r18,6
 833 01fa 02C0      		rjmp .L61
 835               	.LM70:
 836 01fc 81E0      		ldi r24,lo8(1)
 837 01fe 90E0      		ldi r25,hi8(1)
 838               	.L61:
 839               	.LBE43:
 840               	.LBE42:
 842               	.Ltext18:
 844               	.LM71:
 845 0200 0895      		ret
 846               	/* epilogue: frame size=0 */
 847               	/* epilogue: noreturn */
 848               	/* epilogue end (size=0) */
 849               	/* function ow_read size 31 (31) */
 860               	.Lscope11:
 862               		.stabd	78,0,0
 865               	.global	ow_search_rom
 867               	ow_search_rom:
 868               		.stabd	46,0,0
 870               	.LM72:
 871               	/* prologue: frame size=0 */
 872 0202 FF92      		push r15
 873 0204 0F93      		push r16
 874 0206 1F93      		push r17
 875 0208 CF93      		push r28
 876 020a DF93      		push r29
 877               	/* prologue end (size=5) */
 879               	.LM73:
 880 020c 8823      		tst r24
 881 020e 69F0      		breq .L64
 883               	.LM74:
 884 0210 8FEF      		ldi r24,lo8(-1)
 885 0212 8093 0000 		sts ow_global,r24
 887               	.LM75:
 888 0216 1092 0000 		sts ow_global+1,__zero_reg__
 889 021a E0E0      		ldi r30,lo8(ow_global+2)
 890 021c F0E0      		ldi r31,hi8(ow_global+2)
 891               	.L66:
 892               	.LBB48:
 894               	.LM76:
 895 021e 1192      		st Z+,__zero_reg__
 897               	.LM77:
 898 0220 80E0      		ldi r24,hi8(ow_global+10)
 899 0222 E030      		cpi r30,lo8(ow_global+10)
 900 0224 F807      		cpc r31,r24
 901 0226 29F0      		breq .L67
 902 0228 FACF      		rjmp .L66
 903               	.L64:
 904               	.LBE48:
 906               	.LM78:
 907 022a 8091 0000 		lds r24,ow_global
 908 022e 87FD      		sbrc r24,7
 909 0230 63C0      		rjmp .L68
 910               	.L67:
 912               	.LM79:
 913 0232 0E94 0000 		call reset_onewire
 914 0236 8823      		tst r24
 915 0238 19F4      		brne .L69
 916 023a 8FEF      		ldi r24,lo8(-1)
 917 023c 9FEF      		ldi r25,hi8(-1)
 918 023e 5EC0      		rjmp .L71
 919               	.L69:
 921               	.LM80:
 922 0240 80EF      		ldi r24,lo8(-16)
 923 0242 0E94 0000 		call ow_write_byte
 924 0246 4FEF      		ldi r20,lo8(-1)
 925 0248 F42E      		mov r15,r20
 926 024a C0E0      		ldi r28,lo8(0)
 927 024c D0E0      		ldi r29,hi8(0)
 928               	.L72:
 929 024e 0C2F      		mov r16,r28
 930               	.LBB49:
 931               	.LBB50:
 933               	.LM81:
 934 0250 0E94 0000 		call ow_read
 935 0254 182F      		mov r17,r24
 937               	.LM82:
 938 0256 0E94 0000 		call ow_read
 939 025a 880F      		lsl r24
 940 025c 812B      		or r24,r17
 942               	.LM83:
 943 025e 8330      		cpi r24,lo8(3)
 944 0260 09F4      		brne .+2
 945 0262 4AC0      		rjmp .L68
 947               	.LM84:
 948 0264 8823      		tst r24
 949 0266 A1F5      		brne .L74
 951               	.LM85:
 952 0268 8091 0000 		lds r24,ow_global
 953 026c 9927      		clr r25
 954 026e 87FD      		sbrc r24,7
 955 0270 9095      		com r25
 956 0272 C817      		cp r28,r24
 957 0274 D907      		cpc r29,r25
 958 0276 41F4      		brne .L76
 960               	.LM86:
 961 0278 41E0      		ldi r20,lo8(1)
 962 027a 6C2F      		mov r22,r28
 963 027c 80E0      		ldi r24,lo8(ow_global+2)
 964 027e 90E0      		ldi r25,hi8(ow_global+2)
 965 0280 0E94 0000 		call ow_set_address_bit
 966 0284 11E0      		ldi r17,lo8(1)
 967 0286 2AC0      		rjmp .L78
 968               	.L76:
 970               	.LM87:
 971 0288 8C17      		cp r24,r28
 972 028a 9D07      		cpc r25,r29
 973 028c 44F4      		brge .L79
 975               	.LM88:
 976 028e 40E0      		ldi r20,lo8(0)
 977 0290 6C2F      		mov r22,r28
 978 0292 80E0      		ldi r24,lo8(ow_global+2)
 979 0294 90E0      		ldi r25,hi8(ow_global+2)
 980 0296 0E94 0000 		call ow_set_address_bit
 981 029a FC2E      		mov r15,r28
 982 029c 1FC0      		rjmp .L78
 983               	.L79:
 984               	.LBB51:
 986               	.LM89:
 987 029e 0695      		lsr r16
 988 02a0 0695      		lsr r16
 989 02a2 0695      		lsr r16
 990 02a4 E02F      		mov r30,r16
 991 02a6 FF27      		clr r31
 992 02a8 E050      		subi r30,lo8(-(ow_global))
 993 02aa F040      		sbci r31,hi8(-(ow_global))
 994 02ac 9E01      		movw r18,r28
 995 02ae 2770      		andi r18,lo8(7)
 996 02b0 3070      		andi r19,hi8(7)
 997 02b2 81E0      		ldi r24,lo8(1)
 998 02b4 90E0      		ldi r25,hi8(1)
 999 02b6 02C0      		rjmp 2f
 1000 02b8 880F      	1:	lsl r24
 1001 02ba 991F      		rol r25
 1002 02bc 2A95      	2:	dec r18
 1003 02be E2F7      		brpl 1b
 1004 02c0 4281      		ldd r20,Z+2
 1005 02c2 4823      		and r20,r24
 1007               	.LM90:
 1008 02c4 19F4      		brne .L81
 1009 02c6 FC2E      		mov r15,r28
 1010 02c8 10E0      		ldi r17,lo8(0)
 1011 02ca 08C0      		rjmp .L78
 1012               	.L81:
 1013 02cc 142F      		mov r17,r20
 1014 02ce 06C0      		rjmp .L78
 1015               	.L74:
 1016               	.LBE51:
 1018               	.LM91:
 1019 02d0 412F      		mov r20,r17
 1020 02d2 6C2F      		mov r22,r28
 1021 02d4 80E0      		ldi r24,lo8(ow_global+2)
 1022 02d6 90E0      		ldi r25,hi8(ow_global+2)
 1023 02d8 0E94 0000 		call ow_set_address_bit
 1024               	.L78:
 1026               	.LM92:
 1027 02dc 569A      		sbi 42-0x20,6
 1029               	.LM93:
 1030 02de 812F      		mov r24,r17
 1031 02e0 0E94 0000 		call ow_write
 1032 02e4 2196      		adiw r28,1
 1033               	.LBE50:
 1035               	.LM94:
 1036 02e6 C034      		cpi r28,64
 1037 02e8 D105      		cpc r29,__zero_reg__
 1038 02ea 09F0      		breq .+2
 1039 02ec B0CF      		rjmp .L72
 1040               	.LBE49:
 1042               	.LM95:
 1043 02ee F092 0000 		sts ow_global,r15
 1044 02f2 81E0      		ldi r24,lo8(1)
 1045 02f4 90E0      		ldi r25,hi8(1)
 1046 02f6 02C0      		rjmp .L71
 1047               	.L68:
 1049               	.LM96:
 1050 02f8 80E0      		ldi r24,lo8(0)
 1051 02fa 90E0      		ldi r25,hi8(0)
 1052               	.L71:
 1053               	/* epilogue: frame size=0 */
 1054 02fc DF91      		pop r29
 1055 02fe CF91      		pop r28
 1056 0300 1F91      		pop r17
 1057 0302 0F91      		pop r16
 1058 0304 FF90      		pop r15
 1059 0306 0895      		ret
 1060               	/* epilogue end (size=6) */
 1061               	/* function ow_search_rom size 133 (122) */
 1075               	.Lscope12:
 1077               		.stabd	78,0,0
 1079               	.global	ow_read_byte
 1081               	ow_read_byte:
 1082               		.stabd	46,0,0
 1084               	.LM97:
 1085               	/* prologue: frame size=0 */
 1086 0308 1F93      		push r17
 1087 030a CF93      		push r28
 1088 030c DF93      		push r29
 1089               	/* prologue end (size=3) */
 1090 030e 10E0      		ldi r17,lo8(0)
 1091 0310 C0E0      		ldi r28,lo8(0)
 1092 0312 D0E0      		ldi r29,hi8(0)
 1093               	.L89:
 1094               	.LBB53:
 1096               	.LM98:
 1097 0314 0E94 0000 		call ow_read
 1098 0318 9927      		clr r25
 1099 031a 0C2E      		mov r0,r28
 1100 031c 02C0      		rjmp 2f
 1101 031e 880F      	1:	lsl r24
 1102 0320 991F      		rol r25
 1103 0322 0A94      	2:	dec r0
 1104 0324 E2F7      		brpl 1b
 1105 0326 182B      		or r17,r24
 1106 0328 2196      		adiw r28,1
 1108               	.LM99:
 1109 032a C830      		cpi r28,8
 1110 032c D105      		cpc r29,__zero_reg__
 1111 032e 91F7      		brne .L89
 1112               	.LBE53:
 1114               	.LM100:
 1115 0330 812F      		mov r24,r17
 1116 0332 9927      		clr r25
 1117               	/* epilogue: frame size=0 */
 1118 0334 DF91      		pop r29
 1119 0336 CF91      		pop r28
 1120 0338 1F91      		pop r17
 1121 033a 0895      		ret
 1122               	/* epilogue end (size=4) */
 1123               	/* function ow_read_byte size 26 (19) */
 1128               	.Lscope13:
 1130               		.stabd	78,0,0
 1133               	.global	ow_read_rom
 1135               	ow_read_rom:
 1136               		.stabd	46,0,0
 1138               	.LM101:
 1139               	/* prologue: frame size=0 */
 1140 033c EF92      		push r14
 1141 033e FF92      		push r15
 1142 0340 0F93      		push r16
 1143 0342 1F93      		push r17
 1144 0344 CF93      		push r28
 1145 0346 DF93      		push r29
 1146               	/* prologue end (size=6) */
 1147 0348 7C01      		movw r14,r24
 1149               	.LM102:
 1150 034a 0E94 0000 		call reset_onewire
 1151 034e 8823      		tst r24
 1152 0350 19F4      		brne .L95
 1154               	.LM103:
 1155 0352 8FEF      		ldi r24,lo8(-1)
 1156 0354 9FEF      		ldi r25,hi8(-1)
 1157 0356 1AC0      		rjmp .L97
 1158               	.L95:
 1160               	.LM104:
 1161 0358 83E3      		ldi r24,lo8(51)
 1162 035a 0E94 0000 		call ow_write_byte
 1163 035e E701      		movw r28,r14
 1164 0360 8701      		movw r16,r14
 1165 0362 085F      		subi r16,lo8(-(8))
 1166 0364 1F4F      		sbci r17,hi8(-(8))
 1167               	.L98:
 1168               	.LBB55:
 1170               	.LM105:
 1171 0366 0E94 0000 		call ow_read_byte
 1172 036a 8993      		st Y+,r24
 1174               	.LM106:
 1175 036c C017      		cp r28,r16
 1176 036e D107      		cpc r29,r17
 1177 0370 D1F7      		brne .L98
 1178               	.LBE55:
 1180               	.LM107:
 1181 0372 F701      		movw r30,r14
 1182 0374 1781      		ldd r17,Z+7
 1183 0376 67E0      		ldi r22,lo8(7)
 1184 0378 C701      		movw r24,r14
 1185 037a 0E94 0000 		call crc_checksum
 1186 037e 1817      		cp r17,r24
 1187 0380 19F0      		breq .L100
 1188 0382 8EEF      		ldi r24,lo8(-2)
 1189 0384 9FEF      		ldi r25,hi8(-2)
 1190 0386 02C0      		rjmp .L97
 1191               	.L100:
 1192 0388 81E0      		ldi r24,lo8(1)
 1193 038a 90E0      		ldi r25,hi8(1)
 1194               	.L97:
 1195               	/* epilogue: frame size=0 */
 1196 038c DF91      		pop r29
 1197 038e CF91      		pop r28
 1198 0390 1F91      		pop r17
 1199 0392 0F91      		pop r16
 1200 0394 FF90      		pop r15
 1201 0396 EF90      		pop r14
 1202 0398 0895      		ret
 1203               	/* epilogue end (size=7) */
 1204               	/* function ow_read_rom size 47 (34) */
 1206               	.Lscope14:
 1208               		.stabd	78,0,0
 1212               	.global	ow_eeprom_read
 1214               	ow_eeprom_read:
 1215               		.stabd	46,0,0
 476:onewire/onewire.c **** 
 477:onewire/onewire.c **** /*
 478:onewire/onewire.c ****  *
 479:onewire/onewire.c ****  * DS2502 data functions
 480:onewire/onewire.c ****  *
 481:onewire/onewire.c ****  */
 482:onewire/onewire.c **** 
 483:onewire/onewire.c **** int8_t ow_eeprom_read(struct ow_rom_code_t *rom, void *data)
 484:onewire/onewire.c **** /* {{{ */ {
 1217               	.LM108:
 1218               	/* prologue: frame size=0 */
 1219 039a 1F93      		push r17
 1220 039c CF93      		push r28
 1221 039e DF93      		push r29
 1222               	/* prologue end (size=3) */
 1223 03a0 FC01      		movw r30,r24
 1224 03a2 EB01      		movw r28,r22
 485:onewire/onewire.c **** 
 486:onewire/onewire.c ****     int8_t ret;
 487:onewire/onewire.c **** 
 488:onewire/onewire.c ****     if (rom == NULL)
 1226               	.LM109:
 1227 03a4 892B      		or r24,r25
 1228 03a6 19F4      		brne .L106
 489:onewire/onewire.c ****         ret = ow_skip_rom();
 1230               	.LM110:
 1231 03a8 0E94 0000 		call ow_skip_rom
 1232 03ac 07C0      		rjmp .L108
 1233               	.L106:
 490:onewire/onewire.c ****     else {
 491:onewire/onewire.c **** 
 492:onewire/onewire.c ****         /* check for known family code */
 493:onewire/onewire.c ****         if (!(rom->family == OW_FAMILY_DS2502E48))
 1235               	.LM111:
 1236 03ae 8081      		ld r24,Z
 1237 03b0 8938      		cpi r24,lo8(-119)
 1238 03b2 09F0      		breq .+2
 1239 03b4 41C0      		rjmp .L109
 494:onewire/onewire.c ****             return -2;
 495:onewire/onewire.c **** 
 496:onewire/onewire.c ****         ret = ow_match_rom(rom);
 1241               	.LM112:
 1242 03b6 CF01      		movw r24,r30
 1243 03b8 0E94 0000 		call ow_match_rom
 1244               	.L108:
 497:onewire/onewire.c **** 
 498:onewire/onewire.c ****     }
 499:onewire/onewire.c **** 
 500:onewire/onewire.c ****     if (ret < 0)
 1246               	.LM113:
 1247 03bc 87FF      		sbrs r24,7
 1248 03be 04C0      		rjmp .L111
 501:onewire/onewire.c ****         return ret;
 1250               	.LM114:
 1251 03c0 9927      		clr r25
 1252 03c2 87FD      		sbrc r24,7
 1253 03c4 9095      		com r25
 1254 03c6 3AC0      		rjmp .L113
 1255               	.L111:
 502:onewire/onewire.c **** 
 503:onewire/onewire.c ****     /* transmit command byte */
 504:onewire/onewire.c ****     ow_write_byte(OW_FUNC_READ_MEMORY);
 1257               	.LM115:
 1258 03c8 80EF      		ldi r24,lo8(-16)
 1259 03ca 0E94 0000 		call ow_write_byte
 505:onewire/onewire.c **** 
 506:onewire/onewire.c ****     /* transmit address (mac address starts at offset 5 */
 507:onewire/onewire.c ****     ow_write_byte(5);
 1261               	.LM116:
 1262 03ce 85E0      		ldi r24,lo8(5)
 1263 03d0 0E94 0000 		call ow_write_byte
 508:onewire/onewire.c ****     ow_write_byte(0);
 1265               	.LM117:
 1266 03d4 80E0      		ldi r24,lo8(0)
 1267 03d6 0E94 0000 		call ow_write_byte
 509:onewire/onewire.c **** 
 510:onewire/onewire.c ****     /* read back crc sum of the command */
 511:onewire/onewire.c ****     uint8_t crc = ow_read_byte();
 1269               	.LM118:
 1270 03da 0E94 0000 		call ow_read_byte
 1271               	.LBB63:
 1272               	.LBB64:
 1274               	.Ltext19:
   1:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /* Copyright (c) 2002, 2003, 2004  Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    Copyright (c) 2005, Joerg Wunsch
   3:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    All rights reserved.
   4:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
   5:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
   8:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  11:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      distribution.
  15:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  16:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  20:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  32:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /* $Id: crc16.h,v 1.2.2.1 2006/04/19 20:35:54 joerg_wunsch Exp $ */
  33:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  34:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** #ifndef _UTIL_CRC16_H_
  35:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** #define _UTIL_CRC16_H_
  36:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  37:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** #include <stdint.h>
  38:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  39:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /** \defgroup util_crc <util/crc16.h>: CRC Computations
  40:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code#include <util/crc16.h>\endcode
  41:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  42:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     This header file provides a optimized inline functions for calculating
  43:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     cyclic redundancy checks (CRC) using common polynomials.
  44:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  45:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \par References:
  46:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  47:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \par
  48:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  49:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     See the Dallas Semiconductor app note 27 for 8051 assembler example and
  50:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     general CRC optimization suggestions. The table on the last page of the
  51:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     app note is the key to understanding these implementations.
  52:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  53:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \par
  54:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  55:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Jack Crenshaw's "Implementing CRCs" article in the January 1992 isue of \e
  56:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Embedded \e Systems \e Programming. This may be difficult to find, but it
  57:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     explains CRC's in very clear and concise terms. Well worth the effort to
  58:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     obtain a copy.
  59:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  60:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     A typical application would look like:
  61:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  62:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code
  63:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     // Dallas iButton test vector.
  64:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint8_t serno[] = { 0x02, 0x1c, 0xb8, 0x01, 0, 0, 0, 0xa2 };
  65:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  66:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     int
  67:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     checkcrc(void)
  68:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     {
  69:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	uint8_t crc = 0, i;
  70:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  71:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	for (i = 0; i < sizeof serno / sizeof serno[0]; i++)
  72:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	    crc = _crc_ibutton_update(crc, serno[i]);
  73:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  74:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	return crc; // must be 0
  75:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     }
  76:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \endcode
  77:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** */
  78:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  79:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /** \ingroup util_crc
  80:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Optimized CRC-16 calculation.
  81:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  82:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Polynomial: x^16 + x^15 + x^2 + 1 (0xa001)<br>
  83:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Initial value: 0xffff
  84:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  85:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     This CRC is normally used in disk-drive controllers.
  86:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  87:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
  88:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  89:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code
  90:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint16_t
  91:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     crc16_update(uint16_t crc, uint8_t a)
  92:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     {
  93:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	int i;
  94:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
  95:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	crc ^= a;
  96:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	for (i = 0; i < 8; ++i)
  97:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	{
  98:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	    if (crc & 1)
  99:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		crc = (crc >> 1) ^ 0xA001;
 100:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	    else
 101:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		crc = (crc >> 1);
 102:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	}
 103:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 104:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	return crc;
 105:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     }
 106:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 107:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \endcode */
 108:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 109:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** static __inline__ uint16_t
 110:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** _crc16_update(uint16_t __crc, uint8_t __data)
 111:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** {
 112:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	uint8_t __tmp;
 113:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	uint16_t __ret;
 114:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 115:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	__asm__ __volatile__ (
 116:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %A0,%2" "\n\t"
 117:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov %1,%A0" "\n\t"
 118:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"swap %1" "\n\t"
 119:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %1,%A0" "\n\t"
 120:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov __tmp_reg__,%1" "\n\t"
 121:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 122:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 123:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %1,__tmp_reg__" "\n\t"
 124:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov __tmp_reg__,%1" "\n\t"
 125:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 126:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %1,__tmp_reg__" "\n\t"
 127:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"andi %1,0x07" "\n\t"
 128:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov __tmp_reg__,%A0" "\n\t"
 129:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov %A0,%B0" "\n\t"
 130:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 131:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"ror __tmp_reg__" "\n\t"
 132:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"ror %1" "\n\t"
 133:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"mov %B0,__tmp_reg__" "\n\t"
 134:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %A0,%1" "\n\t"
 135:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"lsr __tmp_reg__" "\n\t"
 136:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"ror %1" "\n\t"
 137:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %B0,__tmp_reg__" "\n\t"
 138:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		"eor %A0,%1"
 139:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		: "=r" (__ret), "=d" (__tmp)
 140:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		: "r" (__data), "0" (__crc)
 141:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 		: "r0"
 142:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	);
 143:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	return __ret;
 144:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** }
 145:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 146:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /** \ingroup util_crc
 147:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Optimized CRC-XMODEM calculation.
 148:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 149:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Polynomial: x^16 + x^12 + x^5 + 1 (0x1021)<br>
 150:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Initial value: 0x0
 151:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 152:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     This is the CRC used by the Xmodem-CRC protocol.
 153:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 154:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
 155:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 156:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code
 157:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint16_t
 158:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     crc_xmodem_update (uint16_t crc, uint8_t data)
 159:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     {
 160:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         int i;
 161:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 162:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         crc = crc ^ ((uint16_t)data << 8);
 163:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         for (i=0; i<8; i++)
 164:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         {
 165:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****             if (crc & 0x8000)
 166:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****                 crc = (crc << 1) ^ 0x1021;
 167:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****             else
 168:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****                 crc <<= 1;
 169:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         }
 170:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 171:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         return crc;
 172:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     }
 173:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \endcode */
 174:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 175:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** static __inline__ uint16_t
 176:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** _crc_xmodem_update(uint16_t __crc, uint8_t __data)
 177:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** {
 178:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint16_t __ret;             /* %B0:%A0 (alias for __crc) */
 179:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint8_t __tmp1;             /* %1 */
 180:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint8_t __tmp2;             /* %2 */
 181:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****                                 /* %3  __data */
 182:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 183:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     __asm__ __volatile__ (
 184:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %B0,%3"          "\n\t" /* crc.hi ^ data */
 185:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    __tmp_reg__,%B0" "\n\t"
 186:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "swap   __tmp_reg__"     "\n\t" /* swap(crc.hi ^ data) */
 187:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 188:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         /* Calculate the ret.lo of the CRC. */
 189:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    %1,__tmp_reg__"  "\n\t"
 190:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %1,0x0f"         "\n\t"
 191:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %1,%B0"          "\n\t"
 192:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    %2,%B0"          "\n\t"
 193:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %2,__tmp_reg__"  "\n\t"
 194:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsl    %2"              "\n\t"
 195:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %2,0xe0"         "\n\t"
 196:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %1,%2"           "\n\t" /* __tmp1 is now ret.lo. */
 197:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 198:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         /* Calculate the ret.hi of the CRC. */
 199:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    %2,__tmp_reg__"  "\n\t"
 200:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %2,%B0"          "\n\t"
 201:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %2,0xf0"         "\n\t"
 202:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsr    %2"              "\n\t"
 203:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    __tmp_reg__,%B0" "\n\t"
 204:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsl    __tmp_reg__"     "\n\t"
 205:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "rol    %2"              "\n\t"
 206:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsr    %B0"             "\n\t"
 207:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsr    %B0"             "\n\t"
 208:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsr    %B0"             "\n\t"
 209:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %B0,0x1f"        "\n\t"
 210:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %B0,%2"          "\n\t"
 211:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %B0,%A0"         "\n\t" /* ret.hi is now ready. */
 212:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    %A0,%1"          "\n\t" /* ret.lo is now ready. */
 213:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "=d" (__ret), "=d" (__tmp1), "=d" (__tmp2)
 214:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "r" (__data), "0" (__crc)
 215:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "r0"
 216:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     );
 217:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     return __ret;
 218:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** }
 219:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 220:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /** \ingroup util_crc
 221:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Optimized CRC-CCITT calculation.
 222:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 223:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Polynomial: x^16 + x^12 + x^5 + 1 (0x8408)<br>
 224:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Initial value: 0xffff
 225:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 226:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     This is the CRC used by PPP and IrDA.
 227:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 228:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     See RFC1171 (PPP protocol) and IrDA IrLAP 1.1
 229:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 230:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \note Although the CCITT polynomial is the same as that used by the Xmodem
 231:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     protocol, they are quite different. The difference is in how the bits are
 232:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     shifted through the alorgithm. Xmodem shifts the MSB of the CRC and the
 233:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     input first, while CCITT shifts the LSB of the CRC and the input first.
 234:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 235:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
 236:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 237:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code
 238:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint16_t
 239:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     crc_ccitt_update (uint16_t crc, uint8_t data)
 240:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     {
 241:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         data ^= lo8 (crc);
 242:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         data ^= data << 4;
 243:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 244:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         return ((((uint16_t)data << 8) | hi8 (crc)) ^ (uint8_t)(data >> 4) 
 245:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****                 ^ ((uint16_t)data << 3));
 246:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     }
 247:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \endcode */
 248:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 249:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** static __inline__ uint16_t
 250:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** _crc_ccitt_update (uint16_t __crc, uint8_t __data)
 251:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** {
 252:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint16_t __ret;
 253:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 254:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     __asm__ __volatile__ (
 255:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %A0,%1"          "\n\t"
 256:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 257:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    __tmp_reg__,%A0" "\n\t"
 258:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "swap   %A0"             "\n\t"
 259:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %A0,0xf0"        "\n\t"
 260:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %A0,__tmp_reg__" "\n\t"
 261:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 262:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    __tmp_reg__,%B0" "\n\t"
 263:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 264:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "mov    %B0,%A0"         "\n\t"
 265:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 266:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "swap   %A0"             "\n\t"
 267:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "andi   %A0,0x0f"        "\n\t"
 268:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    __tmp_reg__,%A0" "\n\t"
 269:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 270:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsr    %A0"             "\n\t"
 271:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %B0,%A0"         "\n\t"
 272:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 273:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %A0,%B0"         "\n\t"
 274:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsl    %A0"             "\n\t"
 275:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsl    %A0"             "\n\t"
 276:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "lsl    %A0"             "\n\t"
 277:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         "eor    %A0,__tmp_reg__"
 278:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 279:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "=d" (__ret)
 280:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "r" (__data), "0" (__crc)
 281:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****         : "r0"
 282:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     );
 283:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     return __ret;
 284:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** }
 285:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 286:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** /** \ingroup util_crc
 287:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Optimized Dallas (now Maxim) iButton 8-bit CRC calculation.
 288:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 289:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Polynomial: x^8 + x^5 + x^4 + 1 (0x8C)<br>
 290:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     Initial value: 0x0
 291:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 292:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     See http://www.maxim-ic.com/appnotes.cfm/appnote_number/27
 293:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 294:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
 295:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 296:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \code
 297:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     uint8_t
 298:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     _crc_ibutton_update(uint8_t crc, uint8_t data)
 299:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     {
 300:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	uint8_t i;
 301:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 302:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	crc = crc ^ data;
 303:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	for (i = 0; i < 8; i++)
 304:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	{
 305:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	    if (crc & 0x01)
 306:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	        crc = (crc >> 1) ^ 0x8C;
 307:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	    else
 308:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	        crc >>= 1;
 309:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	}
 310:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 311:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	return crc;
 312:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     }
 313:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h ****     \endcode
 314:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** */
 315:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 
 316:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** static __inline__ uint8_t
 317:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** _crc_ibutton_update(uint8_t __crc, uint8_t __data)
 318:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** {
 319:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	uint8_t __i, __pattern;
 320:/usr/lib/gcc/avr/4.1.0/../../../../avr/include/util/crc16.h **** 	__asm__ __volatile__ (
 1276               	.LM119:
 1277 03de 30E0      		ldi r19,lo8(0)
 1278 03e0 90EF      		ldi r25,lo8(-16)
 1279 03e2 532F      		mov r21,r19
 1280               	/* #APP */
 1281 03e4 5927      			eor	r21, r25
 1282 03e6 48E0      			ldi	r20, 8
 1283 03e8 2CE8      			ldi	r18, 0x8C
 1284 03ea 50FB      		1:	bst	r21, 0
 1285 03ec 5695      			lsr	r21
 1286 03ee 0EF4      			brtc	2f
 1287 03f0 5227      			eor	r21, r18
 1288 03f2 4A95      		2:	dec	r20
 1289 03f4 D1F7      			brne	1b
 1290               		
 1291               	/* #NOAPP */
 1292 03f6 952F      		mov r25,r21
 1293               	.LBE64:
 1294               	.LBE63:
 1295               	.LBB65:
 1296               	.LBB66:
 1297 03f8 25E0      		ldi r18,lo8(5)
 1298               	/* #APP */
 1299 03fa 9227      			eor	r25, r18
 1300 03fc 48E0      			ldi	r20, 8
 1301 03fe 2CE8      			ldi	r18, 0x8C
 1302 0400 90FB      		1:	bst	r25, 0
 1303 0402 9695      			lsr	r25
 1304 0404 0EF4      			brtc	2f
 1305 0406 9227      			eor	r25, r18
 1306 0408 4A95      		2:	dec	r20
 1307 040a D1F7      			brne	1b
 1308               		
 1309               	/* #NOAPP */
 1310               	.LBE66:
 1311               	.LBE65:
 1312               	.LBB67:
 1313               	.LBB68:
 1314               	/* #APP */
 1315 040c 9327      			eor	r25, r19
 1316 040e 38E0      			ldi	r19, 8
 1317 0410 2CE8      			ldi	r18, 0x8C
 1318 0412 90FB      		1:	bst	r25, 0
 1319 0414 9695      			lsr	r25
 1320 0416 0EF4      			brtc	2f
 1321 0418 9227      			eor	r25, r18
 1322 041a 3A95      		2:	dec	r19
 1323 041c D1F7      			brne	1b
 1324               		
 1325               	/* #NOAPP */
 1326               	.LBE68:
 1327               	.LBE67:
 1329               	.Ltext20:
 512:onewire/onewire.c **** 
 513:onewire/onewire.c ****     /* check crc */
 514:onewire/onewire.c ****     uint8_t crc2 = 0;
 515:onewire/onewire.c ****     crc2 = _crc_ibutton_update(crc2, OW_FUNC_READ_MEMORY);
 516:onewire/onewire.c ****     crc2 = _crc_ibutton_update(crc2, 5);
 517:onewire/onewire.c ****     crc2 = _crc_ibutton_update(crc2, 0);
 518:onewire/onewire.c **** 
 519:onewire/onewire.c ****     if (crc != crc2)
 1331               	.LM120:
 1332 041e 8917      		cp r24,r25
 1333 0420 59F4      		brne .L109
 1334 0422 10E0      		ldi r17,lo8(0)
 1335               	.L115:
 1336               	.LBB69:
 520:onewire/onewire.c ****         return -2;
 521:onewire/onewire.c **** 
 522:onewire/onewire.c ****     uint8_t *p = (uint8_t *)data+5;
 523:onewire/onewire.c **** 
 524:onewire/onewire.c ****     /* read 6 byte of data */
 525:onewire/onewire.c ****     for (uint8_t i = 0; i < 6; i++)
 526:onewire/onewire.c ****         *p-- = ow_read_byte();
 1338               	.LM121:
 1339 0424 0E94 0000 		call ow_read_byte
 1340 0428 8D83      		std Y+5,r24
 1342               	.LM122:
 1343 042a 1F5F      		subi r17,lo8(-(1))
 1344 042c 2197      		sbiw r28,1
 1345 042e 1630      		cpi r17,lo8(6)
 1346 0430 C9F7      		brne .L115
 1347 0432 80E0      		ldi r24,lo8(0)
 1348 0434 90E0      		ldi r25,hi8(0)
 1349 0436 02C0      		rjmp .L113
 1350               	.L109:
 1351 0438 8EEF      		ldi r24,lo8(-2)
 1352 043a 9FEF      		ldi r25,hi8(-2)
 1353               	.L113:
 1354               	.LBE69:
 1355               	/* epilogue: frame size=0 */
 1356 043c DF91      		pop r29
 1357 043e CF91      		pop r28
 1358 0440 1F91      		pop r17
 1359 0442 0895      		ret
 1360               	/* epilogue end (size=4) */
 1361               	/* function ow_eeprom_read size 118 (111) */
 1391               	.Lscope15:
 1393               		.stabd	78,0,0
 1396               	.global	ow_temp_power
 1398               	ow_temp_power:
 1399               		.stabd	46,0,0
 1401               	.LM123:
 1402               	/* prologue: frame size=0 */
 1403               	/* prologue end (size=0) */
 1404 0444 FC01      		movw r30,r24
 1406               	.LM124:
 1407 0446 892B      		or r24,r25
 1408 0448 19F4      		brne .L121
 1410               	.LM125:
 1411 044a 0E94 0000 		call ow_skip_rom
 1412 044e 0BC0      		rjmp .L123
 1413               	.L121:
 1414               	.LBB72:
 1415               	.LBB73:
 1417               	.LM126:
 1418 0450 8081      		ld r24,Z
 1419 0452 8031      		cpi r24,lo8(16)
 1420 0454 29F0      		breq .L124
 1421 0456 8232      		cpi r24,lo8(34)
 1422 0458 19F0      		breq .L124
 1423 045a 8EEF      		ldi r24,lo8(-2)
 1424 045c 9FEF      		ldi r25,hi8(-2)
 1425 045e 0895      		ret
 1426               	.L124:
 1427               	.LBE73:
 1428               	.LBE72:
 1430               	.LM127:
 1431 0460 CF01      		movw r24,r30
 1432 0462 0E94 0000 		call ow_match_rom
 1433               	.L123:
 1435               	.LM128:
 1436 0466 87FF      		sbrs r24,7
 1437 0468 04C0      		rjmp .L128
 1439               	.LM129:
 1440 046a 9927      		clr r25
 1441 046c 87FD      		sbrc r24,7
 1442 046e 9095      		com r25
 1443 0470 0895      		ret
 1444               	.L128:
 1446               	.LM130:
 1447 0472 84EB      		ldi r24,lo8(-76)
 1448 0474 0E94 0000 		call ow_write_byte
 1450               	.LM131:
 1451 0478 0E94 0000 		call ow_read
 1452 047c 9927      		clr r25
 1453 047e 87FD      		sbrc r24,7
 1454 0480 9095      		com r25
 1456               	.LM132:
 1457 0482 0895      		ret
 1458               	/* epilogue: frame size=0 */
 1459               	/* epilogue: noreturn */
 1460               	/* epilogue end (size=0) */
 1461               	/* function ow_temp_power size 32 (32) */
 1466               	.Lscope16:
 1468               		.stabd	78,0,0
 1472               	.global	ow_temp_read_scratchpad
 1474               	ow_temp_read_scratchpad:
 1475               		.stabd	46,0,0
 1477               	.LM133:
 1478               	/* prologue: frame size=0 */
 1479 0484 EF92      		push r14
 1480 0486 FF92      		push r15
 1481 0488 0F93      		push r16
 1482 048a 1F93      		push r17
 1483 048c CF93      		push r28
 1484 048e DF93      		push r29
 1485               	/* prologue end (size=6) */
 1486 0490 FC01      		movw r30,r24
 1487 0492 7B01      		movw r14,r22
 1489               	.LM134:
 1490 0494 892B      		or r24,r25
 1491 0496 19F4      		brne .L132
 1493               	.LM135:
 1494 0498 0E94 0000 		call ow_skip_rom
 1495 049c 0BC0      		rjmp .L134
 1496               	.L132:
 1497               	.LBB77:
 1498               	.LBB78:
 1500               	.LM136:
 1501 049e 8081      		ld r24,Z
 1502 04a0 8031      		cpi r24,lo8(16)
 1503 04a2 29F0      		breq .L135
 1504 04a4 8232      		cpi r24,lo8(34)
 1505 04a6 19F0      		breq .L135
 1506 04a8 8DEF      		ldi r24,lo8(-3)
 1507 04aa 9FEF      		ldi r25,hi8(-3)
 1508 04ac 23C0      		rjmp .L138
 1509               	.L135:
 1510               	.LBE78:
 1511               	.LBE77:
 1513               	.LM137:
 1514 04ae CF01      		movw r24,r30
 1515 04b0 0E94 0000 		call ow_match_rom
 1516               	.L134:
 1518               	.LM138:
 1519 04b4 87FF      		sbrs r24,7
 1520 04b6 04C0      		rjmp .L139
 1522               	.LM139:
 1523 04b8 9927      		clr r25
 1524 04ba 87FD      		sbrc r24,7
 1525 04bc 9095      		com r25
 1526 04be 1AC0      		rjmp .L138
 1527               	.L139:
 1529               	.LM140:
 1530 04c0 8EEB      		ldi r24,lo8(-66)
 1531 04c2 0E94 0000 		call ow_write_byte
 1532 04c6 E701      		movw r28,r14
 1533 04c8 8701      		movw r16,r14
 1534 04ca 075F      		subi r16,lo8(-(9))
 1535 04cc 1F4F      		sbci r17,hi8(-(9))
 1536               	.L141:
 1537               	.LBB79:
 1539               	.LM141:
 1540 04ce 0E94 0000 		call ow_read_byte
 1541 04d2 8993      		st Y+,r24
 1543               	.LM142:
 1544 04d4 C017      		cp r28,r16
 1545 04d6 D107      		cpc r29,r17
 1546 04d8 D1F7      		brne .L141
 1547               	.LBE79:
 1549               	.LM143:
 1550 04da F701      		movw r30,r14
 1551 04dc 1085      		ldd r17,Z+8
 1552 04de 68E0      		ldi r22,lo8(8)
 1553 04e0 C701      		movw r24,r14
 1554 04e2 0E94 0000 		call crc_checksum
 1555 04e6 1817      		cp r17,r24
 1556 04e8 19F0      		breq .L143
 1557 04ea 8EEF      		ldi r24,lo8(-2)
 1558 04ec 9FEF      		ldi r25,hi8(-2)
 1559 04ee 02C0      		rjmp .L138
 1560               	.L143:
 1561 04f0 81E0      		ldi r24,lo8(1)
 1562 04f2 90E0      		ldi r25,hi8(1)
 1563               	.L138:
 1564               	/* epilogue: frame size=0 */
 1565 04f4 DF91      		pop r29
 1566 04f6 CF91      		pop r28
 1567 04f8 1F91      		pop r17
 1568 04fa 0F91      		pop r16
 1569 04fc FF90      		pop r15
 1570 04fe EF90      		pop r14
 1571 0500 0895      		ret
 1572               	/* epilogue end (size=7) */
 1573               	/* function ow_temp_read_scratchpad size 63 (50) */
 1578               	.Lscope17:
 1580               		.stabd	78,0,0
 1584               	.global	ow_temp_start_convert
 1586               	ow_temp_start_convert:
 1587               		.stabd	46,0,0
 1589               	.LM144:
 1590               	/* prologue: frame size=0 */
 1591 0502 1F93      		push r17
 1592               	/* prologue end (size=1) */
 1593 0504 FC01      		movw r30,r24
 1594 0506 162F      		mov r17,r22
 1596               	.LM145:
 1597 0508 892B      		or r24,r25
 1598 050a 19F4      		brne .L149
 1600               	.LM146:
 1601 050c 0E94 0000 		call ow_skip_rom
 1602 0510 0BC0      		rjmp .L151
 1603               	.L149:
 1604               	.LBB82:
 1605               	.LBB83:
 1607               	.LM147:
 1608 0512 8081      		ld r24,Z
 1609 0514 8031      		cpi r24,lo8(16)
 1610 0516 29F0      		breq .L152
 1611 0518 8232      		cpi r24,lo8(34)
 1612 051a 19F0      		breq .L152
 1613 051c 8EEF      		ldi r24,lo8(-2)
 1614 051e 9FEF      		ldi r25,hi8(-2)
 1615 0520 19C0      		rjmp .L155
 1616               	.L152:
 1617               	.LBE83:
 1618               	.LBE82:
 1620               	.LM148:
 1621 0522 CF01      		movw r24,r30
 1622 0524 0E94 0000 		call ow_match_rom
 1623               	.L151:
 1625               	.LM149:
 1626 0528 87FF      		sbrs r24,7
 1627 052a 04C0      		rjmp .L156
 1629               	.LM150:
 1630 052c 9927      		clr r25
 1631 052e 87FD      		sbrc r24,7
 1632 0530 9095      		com r25
 1633 0532 10C0      		rjmp .L155
 1634               	.L156:
 1636               	.LM151:
 1637 0534 84E4      		ldi r24,lo8(68)
 1638 0536 0E94 0000 		call ow_write_byte
 1640               	.LM152:
 1641 053a 569A      		sbi 42-0x20,6
 1643               	.LM153:
 1644 053c 5E9A      		sbi 43-0x20,6
 1646               	.LM154:
 1647 053e 1123      		tst r17
 1648 0540 19F4      		brne .L162
 1649 0542 80E0      		ldi r24,lo8(0)
 1650 0544 90E0      		ldi r25,hi8(0)
 1651 0546 06C0      		rjmp .L155
 1652               	.L162:
 1654               	.LM155:
 1655 0548 0E94 0000 		call ow_read
 1656 054c 8823      		tst r24
 1657 054e E1F3      		breq .L162
 1658 0550 81E0      		ldi r24,lo8(1)
 1659 0552 90E0      		ldi r25,hi8(1)
 1660               	.L155:
 1661               	/* epilogue: frame size=0 */
 1662 0554 1F91      		pop r17
 1663 0556 0895      		ret
 1664               	/* epilogue end (size=2) */
 1665               	/* function ow_temp_start_convert size 43 (40) */
 1670               	.Lscope18:
 1672               		.stabd	78,0,0
 1673               		.comm ow_global,10,1
 1676               	.Letext0:
 1677               	/* File "onewire/onewire.c": code  740 = 0x02e4 ( 665), prologues  32, epilogues  43 */
DEFINED SYMBOLS
                            *ABS*:00000000 onewire.c
     /tmp/cciLTBui.s:3      *ABS*:0000003f __SREG__
     /tmp/cciLTBui.s:4      *ABS*:0000003e __SP_H__
     /tmp/cciLTBui.s:5      *ABS*:0000003d __SP_L__
     /tmp/cciLTBui.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cciLTBui.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cciLTBui.s:143    .text:00000000 init_onewire
     /tmp/cciLTBui.s:170    .text:00000008 ow_set_address_bit
     /tmp/cciLTBui.s:238    .text:00000052 ow_temp_sensor
     /tmp/cciLTBui.s:279    .text:0000006e ow_temp_normalize
     /tmp/cciLTBui.s:334    .text:000000a2 reset_onewire
     /tmp/cciLTBui.s:448    .text:000000e2 ow_write_0
     /tmp/cciLTBui.s:490    .text:000000f0 ow_write_1
     /tmp/cciLTBui.s:550    .text:00000106 ow_write
     /tmp/cciLTBui.s:583    .text:00000116 ow_write_byte
     /tmp/cciLTBui.s:634    .text:0000014a ow_match_rom
     /tmp/cciLTBui.s:727    .text:000001b6 ow_skip_rom
     /tmp/cciLTBui.s:764    .text:000001d0 ow_read
     /tmp/cciLTBui.s:867    .text:00000202 ow_search_rom
                            *COM*:0000000a ow_global
     /tmp/cciLTBui.s:1081   .text:00000308 ow_read_byte
     /tmp/cciLTBui.s:1135   .text:0000033c ow_read_rom
     /tmp/cciLTBui.s:1214   .text:0000039a ow_eeprom_read
     /tmp/cciLTBui.s:1398   .text:00000444 ow_temp_power
     /tmp/cciLTBui.s:1474   .text:00000484 ow_temp_read_scratchpad
     /tmp/cciLTBui.s:1586   .text:00000502 ow_temp_start_convert

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
crc_checksum
